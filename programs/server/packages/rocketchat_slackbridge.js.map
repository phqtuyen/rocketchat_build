{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge_import.server.js"],"names":["logger","Logger","sections","connection","events","class","Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","public","enableQuery","_id","value","i18nDescription","_","module","watch","require","default","v","util","url","http","https","SlackBridge","constructor","slackClient","apiToken","get","aliasFormat","excludeBotnames","rtm","connected","userTags","slackChannelMap","reactionsMap","Map","key","disconnect","connect","info","RtmClient","start","registerForSlackEvents","registerForRocketEvents","unregisterForRocketEvents","populateSlackChannelMap","err","error","convertSlackMsgTxtToRocketTxtFormat","slackMsgTxt","isEmpty","replace","match","userId","findRocketUser","addRocketUser","slack","rocket","findRocketChannel","slackChannelId","models","Rooms","findOneByImportId","addRocketChannel","slackChannelID","hasRetried","debug","slackResults","isGroup","charAt","HTTP","params","token","channel","data","ok","rocketChannelData","group","existingRocketRoom","findOneByName","name","is_general","rocketId","addImportIds","id","rocketUsers","member","members","creator","rocketUser","username","push","rocketUserCreator","rocketChannel","createRoom","rid","e","message","_sleepForMs","console","log","roomUpdate","ts","Date","created","lastSetTopic","topic","last_set","purpose","family","findOneById","slackUserID","Users","user","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsername","newUser","password","Random","joinDefaultChannels","Accounts","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","update","$set","image_original","image_512","setUserAvatar","importIds","bot_id","addAliasToRocketMsg","rocketUserName","rocketMsgObj","alias","format","createAndSaveRocketMessage","slackMessage","rocketMsgDataDefaults","isImporting","subtype","processSlackSubtypedMessage","msg","text","u","extend","edited","editedAt","parseInt","split","fields","pinned_to","indexOf","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","Messages","findOneBySlackBotIdAndSlackTs","sendMessage","onSlackReactionRemoved","slackReactionMsg","getRocketUser","rocketMsg","findOneBySlackTs","item","rocketID","createRocketID","rocketReaction","reaction","reactions","theReaction","usernames","set","runAsUser","call","onSlackReactionAdded","includes","onSlackMessage","processSlackMessageDeleted","processSlackMessageChanged","processSlackNewMessage","undefined","bot","attachments","icons","emoji","createUserJoinWithRoomIdAndUser","imported","addUserToRoom","inviter","createUserAddedWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","removeUserFromRoom","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","saveRoomTopic","createRoomRenamedWithRoomIdRoomNameAndUser","saveRoomName","archiveRoom","unarchiveRoom","file","url_private_download","details","message_id","size","mimetype","uploadFileFromSlack","t","author_subname","getAvatarUrlFromUsername","setPinnedByIdAndUserId","channel_id","slackFileURL","timeStamp","requestModule","test","parsedUrl","parse","headers","bindEnvironment","stream","fileStore","FileUpload","getStore","insert","Error","absoluteUrl","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","callbacks","onRocketMessage","bind","priority","LOW","onRocketMessageDelete","onRocketSetReaction","onRocketUnSetReaction","remove","CLIENT_EVENTS","on","RTM","AUTHENTICATED","UNABLE_TO_RTM_START","DISCONNECT","RTM_EVENTS","MESSAGE","REACTION_ADDED","reactionMsg","REACTION_REMOVED","CHANNEL_CREATED","CHANNEL_JOINED","CHANNEL_LEFT","CHANNEL_DELETED","CHANNEL_RENAME","GROUP_JOINED","GROUP_LEFT","GROUP_RENAME","TEAM_JOIN","findSlackChannel","rocketChannelName","response","isArray","channels","length","is_member","groups","importFromHistory","options","messages","latest","reverse","has_more","copySlackChannelInfo","channelMap","topic_last_set","topic_creator","copyPins","items","pin","msgObj","importMessages","callback","rocketchat_room","results","oldest","slack_room","slackChannel","slackGroup","rocketMessageDeleted","postDeleteMessageToSlack","rocketMsgID","delete","slackTS","getSlackTS","postReactionAddedToSlack","postReactionRemoveToSlack","rocketMessage","processRocketMessageChanged","outSlackChannels","keys","pluck","postMessageToSlack","timestamp","postResult","post","statusCode","as_user","iconUrl","icon_url","link_names","setSlackBotIdAndSlackTs","postMessageUpdateToSlack","updatedBySlack","previous_message","getRocketChannel","deleteMessage","currentMsg","updateMessage","msgDataDefaults","code","index","substr","slackTs","slackUser","SlackBridgeImport","command","Match","String","room","users","findOne","msgStream","emit","TAPi18n","__","postProcess","sprintf","language","slashCommands"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEAA,SAAS,IAAIC,MAAJ,CAAW,aAAX,EAA0B;AAClCC,YAAU;AACTC,gBAAY,YADH;AAETC,YAAQ,QAFC;AAGTC,WAAO;AAHE;AADwB,CAA1B,CAAT,C;;;;;;;;;;;ACHAC,OAAOC,OAAP,CAAe,YAAW;AACzBC,aAAWC,QAAX,CAAoBC,QAApB,CAA6B,aAA7B,EAA4C,YAAW;AACtD,SAAKC,GAAL,CAAS,qBAAT,EAAgC,KAAhC,EAAuC;AACtCC,YAAM,SADgC;AAEtCC,iBAAW,SAF2B;AAGtCC,cAAQ;AAH8B,KAAvC;AAMA,SAAKH,GAAL,CAAS,sBAAT,EAAiC,EAAjC,EAAqC;AACpCC,YAAM,QAD8B;AAEpCG,mBAAa;AACZC,aAAK,qBADO;AAEZC,eAAO;AAFK,OAFuB;AAMpCJ,iBAAW;AANyB,KAArC;AASA,SAAKF,GAAL,CAAS,yBAAT,EAAoC,EAApC,EAAwC;AACvCC,YAAM,QADiC;AAEvCG,mBAAa;AACZC,aAAK,qBADO;AAEZC,eAAO;AAFK,OAF0B;AAMvCJ,iBAAW,cAN4B;AAOvCK,uBAAiB;AAPsB,KAAxC;AAUA,SAAKP,GAAL,CAAS,6BAAT,EAAwC,EAAxC,EAA4C;AAC3CC,YAAM,QADqC;AAE3CG,mBAAa;AACZC,aAAK,qBADO;AAEZC,eAAO;AAFK,OAF8B;AAM3CJ,iBAAW,kBANgC;AAO3CK,uBAAiB;AAP0B,KAA5C;AAUA,SAAKP,GAAL,CAAS,yBAAT,EAAoC,KAApC,EAA2C;AAC1CC,YAAM,SADoC;AAE1CG,mBAAa;AACZC,aAAK,qBADO;AAEZC,eAAO;AAFK;AAF6B,KAA3C;AAQA,SAAKN,GAAL,CAAS,qBAAT,EAAgC,KAAhC,EAAuC;AACtCC,YAAM,SADgC;AAEtCG,mBAAa,CAAC;AACbC,aAAK,qBADQ;AAEbC,eAAO;AAFM,OAAD,EAGV;AACFD,aAAK,yBADH;AAEFC,eAAO;AAFL,OAHU;AAFyB,KAAvC;AAWA,SAAKN,GAAL,CAAS,0BAAT,EAAqC,EAArC,EAAyC;AACxCC,YAAM,UADkC;AAExCG,mBAAa,CAAC;AACbC,aAAK,qBADQ;AAEbC,eAAO;AAFM,OAAD,EAGV;AACFD,aAAK,yBADH;AAEFC,eAAO;AAFL,OAHU,EAMV;AACFD,aAAK,qBADH;AAEFC,eAAO;AAFL,OANU;AAF2B,KAAzC;AAaA,GApED;AAqEA,CAtED,E;;;;;;;;;;;ACAA,IAAIE,CAAJ;;AAAMC,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACC,UAAQC,CAAR,EAAU;AAACL,QAAEK,CAAF;AAAI;;AAAhB,CAAnC,EAAqD,CAArD;AAAwD,IAAIC,IAAJ;AAASL,OAAOC,KAAP,CAAaC,QAAQ,MAAR,CAAb,EAA6B;AAACC,UAAQC,CAAR,EAAU;AAACC,WAAKD,CAAL;AAAO;;AAAnB,CAA7B,EAAkD,CAAlD;AAAqD,IAAIE,GAAJ;AAAQN,OAAOC,KAAP,CAAaC,QAAQ,KAAR,CAAb,EAA4B;AAACC,UAAQC,CAAR,EAAU;AAACE,UAAIF,CAAJ;AAAM;;AAAlB,CAA5B,EAAgD,CAAhD;AAAmD,IAAIG,IAAJ;AAASP,OAAOC,KAAP,CAAaC,QAAQ,MAAR,CAAb,EAA6B;AAACC,UAAQC,CAAR,EAAU;AAACG,WAAKH,CAAL;AAAO;;AAAnB,CAA7B,EAAkD,CAAlD;AAAqD,IAAII,KAAJ;AAAUR,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACC,UAAQC,CAAR,EAAU;AAACI,YAAMJ,CAAN;AAAQ;;AAApB,CAA9B,EAAoD,CAApD;;AAO/P,MAAMK,WAAN,CAAkB;AAEjBC,gBAAc;AACb,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKM,WAAL,GAAmBT,QAAQ,eAAR,CAAnB;AACA,SAAKU,QAAL,GAAgBxB,WAAWC,QAAX,CAAoBwB,GAApB,CAAwB,sBAAxB,CAAhB;AACA,SAAKC,WAAL,GAAmB1B,WAAWC,QAAX,CAAoBwB,GAApB,CAAwB,yBAAxB,CAAnB;AACA,SAAKE,eAAL,GAAuB3B,WAAWC,QAAX,CAAoBwB,GAApB,CAAwB,sBAAxB,CAAvB;AACA,SAAKG,GAAL,GAAW,EAAX;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AAEAjC,eAAWC,QAAX,CAAoBwB,GAApB,CAAwB,sBAAxB,EAAgD,CAACS,GAAD,EAAMzB,KAAN,KAAgB;AAC/D,UAAIA,UAAU,KAAKe,QAAnB,EAA6B;AAC5B,aAAKA,QAAL,GAAgBf,KAAhB;;AACA,YAAI,KAAKoB,SAAT,EAAoB;AACnB,eAAKM,UAAL;AACA,eAAKC,OAAL;AACA;AACD;AACD,KARD;AAUApC,eAAWC,QAAX,CAAoBwB,GAApB,CAAwB,yBAAxB,EAAmD,CAACS,GAAD,EAAMzB,KAAN,KAAgB;AAClE,WAAKiB,WAAL,GAAmBjB,KAAnB;AACA,KAFD;AAIAT,eAAWC,QAAX,CAAoBwB,GAApB,CAAwB,6BAAxB,EAAuD,CAACS,GAAD,EAAMzB,KAAN,KAAgB;AACtE,WAAKkB,eAAL,GAAuBlB,KAAvB;AACA,KAFD;AAIAT,eAAWC,QAAX,CAAoBwB,GAApB,CAAwB,qBAAxB,EAA+C,CAACS,GAAD,EAAMzB,KAAN,KAAgB;AAC9D,UAAIA,SAAS,KAAKe,QAAlB,EAA4B;AAC3B,aAAKY,OAAL;AACA,OAFD,MAEO;AACN,aAAKD,UAAL;AACA;AACD,KAND;AAOA;;AAEDC,YAAU;AACT,QAAI,KAAKP,SAAL,KAAmB,KAAvB,EAA8B;AAC7B,WAAKA,SAAL,GAAiB,IAAjB;AACArC,aAAOG,UAAP,CAAkB0C,IAAlB,CAAuB,wBAAvB,EAAiD,KAAKb,QAAtD;AACA,YAAMc,YAAY,KAAKf,WAAL,CAAiBe,SAAnC;AACA,WAAKV,GAAL,GAAW,IAAIU,SAAJ,CAAc,KAAKd,QAAnB,CAAX;AACA,WAAKI,GAAL,CAASW,KAAT;AACA,WAAKC,sBAAL;AACAxC,iBAAWC,QAAX,CAAoBwB,GAApB,CAAwB,yBAAxB,EAAmD,CAACS,GAAD,EAAMzB,KAAN,KAAgB;AAClE,YAAIA,KAAJ,EAAW;AACV,eAAKgC,uBAAL;AACA,SAFD,MAEO;AACN,eAAKC,yBAAL;AACA;AACD,OAND;AAOA5C,aAAOC,OAAP,CAAe,MAAM;AACpB,YAAI;AACH,eAAK4C,uBAAL,GADG,CAC6B;AAChC,SAFD,CAEE,OAAOC,GAAP,EAAY;AACbpD,iBAAOK,KAAP,CAAagD,KAAb,CAAmB,sCAAnB,EAA2DD,GAA3D;AACA,eAAKT,UAAL;AACA;AACD,OAPD;AAQA;AACD;;AAEDA,eAAa;AACZ,QAAI,KAAKN,SAAL,KAAmB,IAAvB,EAA6B;AAC5B,WAAKA,SAAL,GAAiB,KAAjB;AACA,WAAKD,GAAL,CAASO,UAAT,IAAuB,KAAKP,GAAL,CAASO,UAAT,EAAvB;AACA3C,aAAOG,UAAP,CAAkB0C,IAAlB,CAAuB,cAAvB;AACA,WAAKK,yBAAL;AACA;AACD;;AAEDI,sCAAoCC,WAApC,EAAiD;AAChD,QAAI,CAACpC,EAAEqC,OAAF,CAAUD,WAAV,CAAL,EAA6B;AAC5BA,oBAAcA,YAAYE,OAAZ,CAAoB,cAApB,EAAoC,MAApC,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,aAApB,EAAmC,MAAnC,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,QAApB,EAA8B,GAA9B,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,iBAApB,EAAuC,SAAvC,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,SAApB,EAA+B,UAA/B,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,MAA7B,CAAd;AACAF,oBAAcA,YAAYE,OAAZ,CAAoB,qBAApB,EAA2C,IAA3C,CAAd;AAEAF,kBAAYE,OAAZ,CAAoB,qCAApB,EAA2D,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7E,YAAI,CAAC,KAAKrB,QAAL,CAAcqB,MAAd,CAAL,EAA4B;AAC3B,eAAKC,cAAL,CAAoBD,MAApB,KAA+B,KAAKE,aAAL,CAAmBF,MAAnB,CAA/B,CAD2B,CACgC;AAC3D;;AACD,cAAMrB,WAAW,KAAKA,QAAL,CAAcqB,MAAd,CAAjB;;AACA,YAAIrB,QAAJ,EAAc;AACbiB,wBAAcA,YAAYE,OAAZ,CAAoBnB,SAASwB,KAA7B,EAAoCxB,SAASyB,MAA7C,CAAd;AACA;AACD,OARD;AASA,KAtBD,MAsBO;AACNR,oBAAc,EAAd;AACA;;AACD,WAAOA,WAAP;AACA;;AAEDS,oBAAkBC,cAAlB,EAAkC;AACjC,WAAOzD,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBC,iBAAxB,CAA0CH,cAA1C,CAAP;AACA;;AAEDI,mBAAiBC,cAAjB,EAAiCC,aAAa,KAA9C,EAAqD;AACpDvE,WAAOK,KAAP,CAAamE,KAAb,CAAmB,uCAAnB,EAA4DF,cAA5D;AACA,QAAIG,eAAe,IAAnB;AACA,QAAIC,UAAU,KAAd;;AACA,QAAIJ,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAAjC,EAAsC;AACrCF,qBAAeG,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,gBAAQ;AAAEC,iBAAO,KAAK9C,QAAd;AAAwB+C,mBAAST;AAAjC;AAAV,OAAhD,CAAf;AACA,KAFD,MAEO,IAAIA,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAAjC,EAAsC;AAC5CF,qBAAeG,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,gBAAQ;AAAEC,iBAAO,KAAK9C,QAAd;AAAwB+C,mBAAST;AAAjC;AAAV,OAA9C,CAAf;AACAI,gBAAU,IAAV;AACA;;AACD,QAAID,gBAAgBA,aAAaO,IAA7B,IAAqCP,aAAaO,IAAb,CAAkBC,EAAlB,KAAyB,IAAlE,EAAwE;AACvE,YAAMC,oBAAoBR,UAAUD,aAAaO,IAAb,CAAkBG,KAA5B,GAAoCV,aAAaO,IAAb,CAAkBD,OAAhF;AACA,YAAMK,qBAAqB5E,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsCH,kBAAkBI,IAAxD,CAA3B,CAFuE,CAIvE;;AACA,UAAIF,sBAAsBF,kBAAkBK,UAA5C,EAAwD;AACvDL,0BAAkBM,QAAlB,GAA6BN,kBAAkBK,UAAlB,GAA+B,SAA/B,GAA2CH,mBAAmBpE,GAA3F;AACAR,mBAAW0D,MAAX,CAAkBC,KAAlB,CAAwBsB,YAAxB,CAAqCP,kBAAkBM,QAAvD,EAAiEN,kBAAkBQ,EAAnF;AACA,OAHD,MAGO;AACN,cAAMC,cAAc,EAApB;;AACA,aAAK,MAAMC,MAAX,IAAqBV,kBAAkBW,OAAvC,EAAgD;AAC/C,cAAID,WAAWV,kBAAkBY,OAAjC,EAA0C;AACzC,kBAAMC,aAAa,KAAKnC,cAAL,CAAoBgC,MAApB,KAA+B,KAAK/B,aAAL,CAAmB+B,MAAnB,CAAlD;;AACA,gBAAIG,cAAcA,WAAWC,QAA7B,EAAuC;AACtCL,0BAAYM,IAAZ,CAAiBF,WAAWC,QAA5B;AACA;AACD;AACD;;AACD,cAAME,oBAAoBhB,kBAAkBY,OAAlB,GAA4B,KAAKlC,cAAL,CAAoBsB,kBAAkBY,OAAtC,KAAkD,KAAKjC,aAAL,CAAmBqB,kBAAkBY,OAArC,CAA9E,GAA8H,IAAxJ;;AACA,YAAI,CAACI,iBAAL,EAAwB;AACvBlG,iBAAOK,KAAP,CAAagD,KAAb,CAAmB,0CAAnB,EAA+D6B,kBAAkBY,OAAjF;AACA;AACA;;AAED,YAAI;AACH,gBAAMK,gBAAgB3F,WAAW4F,UAAX,CAAsB1B,UAAU,GAAV,GAAgB,GAAtC,EAA2CQ,kBAAkBI,IAA7D,EAAmEY,kBAAkBF,QAArF,EAA+FL,WAA/F,CAAtB;AACAT,4BAAkBM,QAAlB,GAA6BW,cAAcE,GAA3C;AACA,SAHD,CAGE,OAAOC,CAAP,EAAU;AACX,cAAI,CAAC/B,UAAL,EAAiB;AAChBvE,mBAAOK,KAAP,CAAamE,KAAb,CAAmB,oDAAnB,EAAyE8B,EAAEC,OAA3E,EADgB,CAEhB;;AACAjG,mBAAOkG,WAAP,CAAmB,IAAnB;;AACA,mBAAO,KAAKxC,iBAAL,CAAuBM,cAAvB,KAA0C,KAAKD,gBAAL,CAAsBC,cAAtB,EAAsC,IAAtC,CAAjD;AACA,WALD,MAKO;AACNmC,oBAAQC,GAAR,CAAYJ,EAAEC,OAAd;AACA;AACD;;AAED,cAAMI,aAAa;AAClBC,cAAI,IAAIC,IAAJ,CAAS3B,kBAAkB4B,OAAlB,GAA4B,IAArC;AADc,SAAnB;AAGA,YAAIC,eAAe,CAAnB;;AACA,YAAI,CAAC5F,EAAEqC,OAAF,CAAU0B,kBAAkB8B,KAAlB,IAA2B9B,kBAAkB8B,KAAlB,CAAwB/F,KAA7D,CAAL,EAA0E;AACzE0F,qBAAWK,KAAX,GAAmB9B,kBAAkB8B,KAAlB,CAAwB/F,KAA3C;AACA8F,yBAAe7B,kBAAkB8B,KAAlB,CAAwBC,QAAvC;AACA;;AACD,YAAI,CAAC9F,EAAEqC,OAAF,CAAU0B,kBAAkBgC,OAAlB,IAA6BhC,kBAAkBgC,OAAlB,CAA0BjG,KAAjE,CAAD,IAA4EiE,kBAAkBgC,OAAlB,CAA0BD,QAA1B,GAAqCF,YAArH,EAAmI;AAClIJ,qBAAWK,KAAX,GAAmB9B,kBAAkBgC,OAAlB,CAA0BjG,KAA7C;AACA;;AACDT,mBAAW0D,MAAX,CAAkBC,KAAlB,CAAwBsB,YAAxB,CAAqCP,kBAAkBM,QAAvD,EAAiEN,kBAAkBQ,EAAnF;AACA,aAAKnD,eAAL,CAAqB2C,kBAAkBM,QAAvC,IAAmD;AAAEE,cAAIpB,cAAN;AAAsB6C,kBAAQ7C,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAA7B,GAAmC,UAAnC,GAAgD;AAA9E,SAAnD;AACA;;AACD,aAAOnE,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoClC,kBAAkBM,QAAtD,CAAP;AACA;;AACDxF,WAAOK,KAAP,CAAamE,KAAb,CAAmB,mBAAnB;AACA;AACA;;AAEDZ,iBAAeyD,WAAf,EAA4B;AAC3B,UAAMtB,aAAavF,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBlD,iBAAxB,CAA0CiD,WAA1C,CAAnB;;AACA,QAAItB,cAAc,CAAC,KAAKzD,QAAL,CAAc+E,WAAd,CAAnB,EAA+C;AAC9C,WAAK/E,QAAL,CAAc+E,WAAd,IAA6B;AAAEvD,eAAQ,KAAKuD,WAAa,GAA5B;AAAgCtD,gBAAS,IAAIgC,WAAWC,QAAU;AAAlE,OAA7B;AACA;;AACD,WAAOD,UAAP;AACA;;AAEDlC,gBAAcwD,WAAd,EAA2B;AAC1BrH,WAAOK,KAAP,CAAamE,KAAb,CAAmB,oCAAnB,EAAyD6C,WAAzD;AACA,UAAM5C,eAAeG,KAAK3C,GAAL,CAAS,kCAAT,EAA6C;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C,QAAd;AAAwBuF,cAAMF;AAA9B;AAAV,KAA7C,CAArB;;AACA,QAAI5C,gBAAgBA,aAAaO,IAA7B,IAAqCP,aAAaO,IAAb,CAAkBC,EAAlB,KAAyB,IAA9D,IAAsER,aAAaO,IAAb,CAAkBuC,IAA5F,EAAkG;AACjG,YAAMC,iBAAiB/C,aAAaO,IAAb,CAAkBuC,IAAzC;AACA,YAAME,QAAQD,eAAeE,MAAf,KAA0B,IAAxC;AACA,YAAMC,QAAQH,eAAeI,OAAf,IAA0BJ,eAAeI,OAAf,CAAuBD,KAAjD,IAA0D,EAAxE;AACA,UAAIE,kBAAJ;;AACA,UAAI,CAACJ,KAAL,EAAY;AACXI,6BAAqBrH,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBQ,qBAAxB,CAA8CH,KAA9C,KAAwDnH,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBS,iBAAxB,CAA0CP,eAAelC,IAAzD,CAA7E;AACA,OAFD,MAEO;AACNuC,6BAAqBrH,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBS,iBAAxB,CAA0CP,eAAelC,IAAzD,CAArB;AACA;;AAED,UAAIuC,kBAAJ,EAAwB;AACvBL,uBAAehC,QAAf,GAA0BqC,mBAAmB7G,GAA7C;AACAwG,uBAAelC,IAAf,GAAsBuC,mBAAmB7B,QAAzC;AACA,OAHD,MAGO;AACN,cAAMgC,UAAU;AACfC,oBAAUC,OAAOxC,EAAP,EADK;AAEfM,oBAAUwB,eAAelC;AAFV,SAAhB;;AAKA,YAAI,CAACmC,KAAD,IAAUE,KAAd,EAAqB;AACpBK,kBAAQL,KAAR,GAAgBA,KAAhB;AACA;;AAED,YAAIF,KAAJ,EAAW;AACVO,kBAAQG,mBAAR,GAA8B,KAA9B;AACA;;AAEDX,uBAAehC,QAAf,GAA0B4C,SAASC,UAAT,CAAoBL,OAApB,CAA1B;AACA,cAAMM,aAAa;AAClBC,qBAAWf,eAAegB,SAAf,GAA2B,IADpB;AAC0B;AAC5CC,iBAAOhB,QAAQ,CAAE,KAAF,CAAR,GAAoB,CAAE,MAAF;AAFT,SAAnB;;AAKA,YAAID,eAAeI,OAAf,IAA0BJ,eAAeI,OAAf,CAAuBc,SAArD,EAAgE;AAC/DJ,qBAAW,MAAX,IAAqBd,eAAeI,OAAf,CAAuBc,SAA5C;AACA;;AAED,YAAIlB,eAAemB,OAAnB,EAA4B;AAC3BL,qBAAW,QAAX,IAAuB,KAAvB;AACAA,qBAAW,6BAAX,IAA4C,EAA5C;AACA;;AAED9H,mBAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBsB,MAAxB,CAA+B;AAAE5H,eAAKwG,eAAehC;AAAtB,SAA/B,EAAiE;AAAEqD,gBAAMP;AAAR,SAAjE;AAEA,cAAMf,OAAO/G,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoCI,eAAehC,QAAnD,CAAb;AAEA,YAAI9D,MAAM,IAAV;;AACA,YAAI8F,eAAeI,OAAnB,EAA4B;AAC3B,cAAIJ,eAAeI,OAAf,CAAuBkB,cAA3B,EAA2C;AAC1CpH,kBAAM8F,eAAeI,OAAf,CAAuBkB,cAA7B;AACA,WAFD,MAEO,IAAItB,eAAeI,OAAf,CAAuBmB,SAA3B,EAAsC;AAC5CrH,kBAAM8F,eAAeI,OAAf,CAAuBmB,SAA7B;AACA;AACD;;AACD,YAAIrH,GAAJ,EAAS;AACR,cAAI;AACHlB,uBAAWwI,aAAX,CAAyBzB,IAAzB,EAA+B7F,GAA/B,EAAoC,IAApC,EAA0C,KAA1C;AACA,WAFD,CAEE,OAAO2B,KAAP,EAAc;AACfrD,mBAAOK,KAAP,CAAamE,KAAb,CAAmB,2BAAnB,EAAgDnB,MAAMkD,OAAtD;AACA;AACD;AACD;;AAED,YAAM0C,YAAY,CAAEzB,eAAe9B,EAAjB,CAAlB;;AACA,UAAI+B,SAASD,eAAeI,OAAxB,IAAmCJ,eAAeI,OAAf,CAAuBsB,MAA9D,EAAsE;AACrED,kBAAUhD,IAAV,CAAeuB,eAAeI,OAAf,CAAuBsB,MAAtC;AACA;;AACD1I,iBAAW0D,MAAX,CAAkBoD,KAAlB,CAAwB7B,YAAxB,CAAqC+B,eAAehC,QAApD,EAA8DyD,SAA9D;;AACA,UAAI,CAAC,KAAK3G,QAAL,CAAc+E,WAAd,CAAL,EAAiC;AAChC,aAAK/E,QAAL,CAAc+E,WAAd,IAA6B;AAAEvD,iBAAQ,KAAKuD,WAAa,GAA5B;AAAgCtD,kBAAS,IAAIyD,eAAelC,IAAM;AAAlE,SAA7B;AACA;;AACD,aAAO9E,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoCI,eAAehC,QAAnD,CAAP;AACA;;AACDxF,WAAOK,KAAP,CAAamE,KAAb,CAAmB,gBAAnB;AACA;AACA;;AAED2E,sBAAoBC,cAApB,EAAoCC,YAApC,EAAkD;AACjD,QAAI,KAAKnH,WAAT,EAAsB;AACrB,YAAMoH,QAAQ,KAAK7H,IAAL,CAAU8H,MAAV,CAAiB,KAAKrH,WAAtB,EAAmCkH,cAAnC,CAAd;;AAEA,UAAIE,UAAUF,cAAd,EAA8B;AAC7BC,qBAAaC,KAAb,GAAqBA,KAArB;AACA;AACD;;AAED,WAAOD,YAAP;AACA;;AAEDG,6BAA2BrD,aAA3B,EAA0CJ,UAA1C,EAAsD0D,YAAtD,EAAoEC,qBAApE,EAA2FC,WAA3F,EAAwG;AACvG,QAAIF,aAAa7I,IAAb,KAAsB,SAA1B,EAAqC;AACpC,UAAIyI,eAAe,EAAnB;;AACA,UAAI,CAAClI,EAAEqC,OAAF,CAAUiG,aAAaG,OAAvB,CAAL,EAAsC;AACrCP,uBAAe,KAAKQ,2BAAL,CAAiC1D,aAAjC,EAAgDJ,UAAhD,EAA4D0D,YAA5D,EAA0EE,WAA1E,CAAf;;AACA,YAAI,CAACN,YAAL,EAAmB;AAClB;AACA;AACD,OALD,MAKO;AACNA,uBAAe;AACdS,eAAK,KAAKxG,mCAAL,CAAyCmG,aAAaM,IAAtD,CADS;AAEd1D,eAAKF,cAAcnF,GAFL;AAGdgJ,aAAG;AACFhJ,iBAAK+E,WAAW/E,GADd;AAEFgF,sBAAUD,WAAWC;AAFnB;AAHW,SAAf;AASA,aAAKmD,mBAAL,CAAyBpD,WAAWC,QAApC,EAA8CqD,YAA9C;AACA;;AACDlI,QAAE8I,MAAF,CAASZ,YAAT,EAAuBK,qBAAvB;;AACA,UAAID,aAAaS,MAAjB,EAAyB;AACxBb,qBAAac,QAAb,GAAwB,IAAItD,IAAJ,CAASuD,SAASX,aAAaS,MAAb,CAAoBtD,EAApB,CAAuByD,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAT,IAAiD,IAA1D,CAAxB;AACA;;AACD,UAAIZ,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3C7D,qBAAavF,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEkD,kBAAQ;AAAEtE,sBAAU;AAAZ;AAAV,SAAlD,CAAb;AACA;;AAED,UAAIyD,aAAac,SAAb,IAA0Bd,aAAac,SAAb,CAAuBC,OAAvB,CAA+Bf,aAAa1E,OAA5C,MAAyD,CAAC,CAAxF,EAA2F;AAC1FsE,qBAAaoB,MAAb,GAAsB,IAAtB;AACApB,qBAAaqB,QAAb,GAAwB7D,KAAK8D,GAA7B;AACAtB,qBAAauB,QAAb,GAAwBzJ,EAAE0J,IAAF,CAAO9E,UAAP,EAAmB,KAAnB,EAA0B,UAA1B,CAAxB;AACA;;AACD,UAAI0D,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3CtJ,eAAOwK,UAAP,CAAkB,MAAM;AACvB,cAAIrB,aAAaP,MAAb,IAAuBO,aAAa7C,EAApC,IAA0C,CAACpG,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BC,6BAA3B,CAAyDvB,aAAaP,MAAtE,EAA8EO,aAAa7C,EAA3F,CAA/C,EAA+I;AAC9IpG,uBAAWyK,WAAX,CAAuBlF,UAAvB,EAAmCsD,YAAnC,EAAiDlD,aAAjD,EAAgE,IAAhE;AACA;AACD,SAJD,EAIG,GAJH;AAKA,OAND,MAMO;AACNnG,eAAOK,KAAP,CAAamE,KAAb,CAAmB,6BAAnB;AACAhE,mBAAWyK,WAAX,CAAuBlF,UAAvB,EAAmCsD,YAAnC,EAAiDlD,aAAjD,EAAgE,IAAhE;AACA;AACD;AACD;AAED;;;;;AAGA+E,yBAAuBC,gBAAvB,EAAyC;AACxC,QAAIA,gBAAJ,EAAsB;AACrB,YAAMpF,aAAa,KAAKqF,aAAL,CAAmBD,iBAAiB5D,IAApC,CAAnB,CADqB,CAErB;;AACA,UAAI8D,YAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BO,gBAA3B,CAA4CH,iBAAiBI,IAAjB,CAAsB3E,EAAlE,CAAhB;;AAEA,UAAI,CAACyE,SAAL,EAAgB;AACf;AACA,cAAMG,WAAW,KAAKC,cAAL,CAAoBN,iBAAiBI,IAAjB,CAAsBxG,OAA1C,EAAmDoG,iBAAiBI,IAAjB,CAAsB3E,EAAzE,CAAjB;AACAyE,oBAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuCoE,QAAvC,CAAZ;AACA;;AAED,UAAIH,aAAatF,UAAjB,EAA6B;AAC5B,cAAM2F,iBAAkB,IAAIP,iBAAiBQ,QAAU,GAAvD,CAD4B,CAG5B;;AACA,YAAIN,UAAUO,SAAd,EAAyB;AACxB,gBAAMC,cAAcR,UAAUO,SAAV,CAAoBF,cAApB,CAApB;;AACA,cAAIG,WAAJ,EAAiB;AAChB,gBAAIA,YAAYC,SAAZ,CAAsBtB,OAAtB,CAA8BzE,WAAWC,QAAzC,MAAuD,CAAC,CAA5D,EAA+D;AAC9D,qBAD8D,CACtD;AACR;AACD;AACD,SAPD,MAOO;AACN;AACA;AACA,SAd2B,CAgB5B;;;AACA,aAAKxD,YAAL,CAAkBuJ,GAAlB,CAAuB,QAAQV,UAAUrK,GAAK,GAAG0K,cAAgB,EAAjE,EAAoE3F,UAApE;AACA/F,eAAOK,KAAP,CAAamE,KAAb,CAAmB,8BAAnB;AACAlE,eAAO0L,SAAP,CAAiBjG,WAAW/E,GAA5B,EAAiC,MAAM;AACtCV,iBAAO2L,IAAP,CAAY,aAAZ,EAA2BP,cAA3B,EAA2CL,UAAUrK,GAArD;AACA,SAFD;AAGA;AACD;AACD;AAED;;;;;AAGAkL,uBAAqBf,gBAArB,EAAuC;AACtC,QAAIA,gBAAJ,EAAsB;AACrB,YAAMpF,aAAa,KAAKqF,aAAL,CAAmBD,iBAAiB5D,IAApC,CAAnB;;AAEA,UAAIxB,WAAW0C,KAAX,CAAiB0D,QAAjB,CAA0B,KAA1B,CAAJ,EAAsC;AACrC;AACA,OALoB,CAOrB;;;AACA,UAAId,YAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BO,gBAA3B,CAA4CH,iBAAiBI,IAAjB,CAAsB3E,EAAlE,CAAhB;;AAEA,UAAI,CAACyE,SAAL,EAAgB;AACf;AACA,cAAMG,WAAW,KAAKC,cAAL,CAAoBN,iBAAiBI,IAAjB,CAAsBxG,OAA1C,EAAmDoG,iBAAiBI,IAAjB,CAAsB3E,EAAzE,CAAjB;AACAyE,oBAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuCoE,QAAvC,CAAZ;AACA;;AAED,UAAIH,aAAatF,UAAjB,EAA6B;AAC5B,cAAM2F,iBAAkB,IAAIP,iBAAiBQ,QAAU,GAAvD,CAD4B,CAG5B;;AACA,YAAIN,UAAUO,SAAd,EAAyB;AACxB,gBAAMC,cAAcR,UAAUO,SAAV,CAAoBF,cAApB,CAApB;;AACA,cAAIG,WAAJ,EAAiB;AAChB,gBAAIA,YAAYC,SAAZ,CAAsBtB,OAAtB,CAA8BzE,WAAWC,QAAzC,MAAuD,CAAC,CAA5D,EAA+D;AAC9D,qBAD8D,CACtD;AACR;AACD;AACD,SAX2B,CAa5B;;;AACA,aAAKxD,YAAL,CAAkBuJ,GAAlB,CAAuB,MAAMV,UAAUrK,GAAK,GAAG0K,cAAgB,EAA/D,EAAkE3F,UAAlE;AACA/F,eAAOK,KAAP,CAAamE,KAAb,CAAmB,4BAAnB;AACAlE,eAAO0L,SAAP,CAAiBjG,WAAW/E,GAA5B,EAAiC,MAAM;AACtCV,iBAAO2L,IAAP,CAAY,aAAZ,EAA2BP,cAA3B,EAA2CL,UAAUrK,GAArD;AACA,SAFD;AAGA;AACD;AACD;AAED;;;;;;AAIAoL,iBAAe3C,YAAf,EAA6BE,WAA7B,EAA0C;AACzC,QAAIF,aAAaG,OAAjB,EAA0B;AACzB,cAAQH,aAAaG,OAArB;AACC,aAAK,iBAAL;AACC,eAAKyC,0BAAL,CAAgC5C,YAAhC;AACA;;AACD,aAAK,iBAAL;AACC,eAAK6C,0BAAL,CAAgC7C,YAAhC;AACA;;AACD;AACC;AACA,eAAK8C,sBAAL,CAA4B9C,YAA5B,EAA0CE,WAA1C;AATF;AAWA,KAZD,MAYO;AACN;AACA,WAAK4C,sBAAL,CAA4B9C,YAA5B,EAA0CE,WAA1C;AACA;AACD;;AAEDE,8BAA4B1D,aAA5B,EAA2CJ,UAA3C,EAAuD0D,YAAvD,EAAqEE,WAArE,EAAkF;AACjF,QAAIN,eAAe,IAAnB;;AACA,YAAQI,aAAaG,OAArB;AACC,WAAK,aAAL;AACC,YAAIH,aAAazD,QAAb,KAA0BwG,SAA1B,IAAuC,KAAKrK,eAA5C,IAA+DsH,aAAazD,QAAb,CAAsBtC,KAAtB,CAA4B,KAAKvB,eAAjC,CAAnE,EAAsH;AACrH;AACA;;AAEDkH,uBAAe;AACdS,eAAK,KAAKxG,mCAAL,CAAyCmG,aAAaM,IAAtD,CADS;AAEd1D,eAAKF,cAAcnF,GAFL;AAGdyL,eAAK,IAHS;AAIdC,uBAAajD,aAAaiD,WAJZ;AAKd1G,oBAAUyD,aAAazD,QAAb,IAAyByD,aAAaP;AALlC,SAAf;AAOA,aAAKC,mBAAL,CAAyBM,aAAazD,QAAb,IAAyByD,aAAaP,MAA/D,EAAuEG,YAAvE;;AACA,YAAII,aAAakD,KAAjB,EAAwB;AACvBtD,uBAAauD,KAAb,GAAqBnD,aAAakD,KAAb,CAAmBC,KAAxC;AACA;;AACD,eAAOvD,YAAP;;AACD,WAAK,YAAL;AACC,eAAO,KAAKF,mBAAL,CAAyBpD,WAAWC,QAApC,EAA8C;AACpD8D,eAAM,IAAI,KAAKxG,mCAAL,CAAyCmG,aAAaM,IAAtD,CAA6D;AADnB,SAA9C,CAAP;;AAGD,WAAK,cAAL;AACC,YAAIJ,WAAJ,EAAiB;AAChBnJ,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B8B,+BAA3B,CAA2D1G,cAAcnF,GAAzE,EAA8E+E,UAA9E,EAA0F;AAAEa,gBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,sBAAU;AAA1E,WAA1F;AACA,SAFD,MAEO;AACNtM,qBAAWuM,aAAX,CAAyB5G,cAAcnF,GAAvC,EAA4C+E,UAA5C;AACA;;AACD;;AACD,WAAK,YAAL;AACC,YAAI0D,aAAauD,OAAjB,EAA0B;AACzB,gBAAMA,UAAUvD,aAAauD,OAAb,GAAuB,KAAKpJ,cAAL,CAAoB6F,aAAauD,OAAjC,KAA6C,KAAKnJ,aAAL,CAAmB4F,aAAauD,OAAhC,CAApE,GAA+G,IAA/H;;AACA,cAAIrD,WAAJ,EAAiB;AAChBnJ,uBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BkC,gCAA3B,CAA4D9G,cAAcnF,GAA1E,EAA+E+E,UAA/E,EAA2F;AAC1Fa,kBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CADsF;AAE1FL,iBAAG;AACFhJ,qBAAKgM,QAAQhM,GADX;AAEFgF,0BAAUgH,QAAQhH;AAFhB,eAFuF;AAM1F8G,wBAAU;AANgF,aAA3F;AAQA,WATD,MASO;AACNtM,uBAAWuM,aAAX,CAAyB5G,cAAcnF,GAAvC,EAA4C+E,UAA5C,EAAwDiH,OAAxD;AACA;AACD;;AACD;;AACD,WAAK,eAAL;AACA,WAAK,aAAL;AACC,YAAIrD,WAAJ,EAAiB;AAChBnJ,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BmC,gCAA3B,CAA4D/G,cAAcnF,GAA1E,EAA+E+E,UAA/E,EAA2F;AAC1Fa,gBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CADsF;AAE1FyC,sBAAU;AAFgF,WAA3F;AAIA,SALD,MAKO;AACNtM,qBAAW2M,kBAAX,CAA8BhH,cAAcnF,GAA5C,EAAiD+E,UAAjD;AACA;;AACD;;AACD,WAAK,eAAL;AACA,WAAK,aAAL;AACC,YAAI4D,WAAJ,EAAiB;AAChBnJ,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BqC,qDAA3B,CAAiF,oBAAjF,EAAuGjH,cAAcnF,GAArH,EAA0HyI,aAAazC,KAAvI,EAA8IjB,UAA9I,EAA0J;AAAEa,gBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,sBAAU;AAA1E,WAA1J;AACA,SAFD,MAEO;AACNtM,qBAAW6M,aAAX,CAAyBlH,cAAcnF,GAAvC,EAA4CyI,aAAazC,KAAzD,EAAgEjB,UAAhE,EAA4E,KAA5E;AACA;;AACD;;AACD,WAAK,iBAAL;AACA,WAAK,eAAL;AACC,YAAI4D,WAAJ,EAAiB;AAChBnJ,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BqC,qDAA3B,CAAiF,oBAAjF,EAAuGjH,cAAcnF,GAArH,EAA0HyI,aAAavC,OAAvI,EAAgJnB,UAAhJ,EAA4J;AAAEa,gBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,sBAAU;AAA1E,WAA5J;AACA,SAFD,MAEO;AACNtM,qBAAW6M,aAAX,CAAyBlH,cAAcnF,GAAvC,EAA4CyI,aAAavC,OAAzD,EAAkEnB,UAAlE,EAA8E,KAA9E;AACA;;AACD;;AACD,WAAK,cAAL;AACA,WAAK,YAAL;AACC,YAAI4D,WAAJ,EAAiB;AAChBnJ,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BuC,0CAA3B,CAAsEnH,cAAcnF,GAApF,EAAyFyI,aAAanE,IAAtG,EAA4GS,UAA5G,EAAwH;AAAEa,gBAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,sBAAU;AAA1E,WAAxH;AACA,SAFD,MAEO;AACNtM,qBAAW+M,YAAX,CAAwBpH,cAAcnF,GAAtC,EAA2CyI,aAAanE,IAAxD,EAA8DS,UAA9D,EAA0E,KAA1E;AACA;;AACD;;AACD,WAAK,iBAAL;AACA,WAAK,eAAL;AACC,YAAI,CAAC4D,WAAL,EAAkB;AACjBnJ,qBAAWgN,WAAX,CAAuBrH,aAAvB;AACA;;AACD;;AACD,WAAK,mBAAL;AACA,WAAK,iBAAL;AACC,YAAI,CAACwD,WAAL,EAAkB;AACjBnJ,qBAAWiN,aAAX,CAAyBtH,aAAzB;AACA;;AACD;;AACD,WAAK,YAAL;AACC,YAAIsD,aAAaiE,IAAb,IAAqBjE,aAAaiE,IAAb,CAAkBC,oBAAlB,KAA2CnB,SAApE,EAA+E;AAC9E,gBAAMoB,UAAU;AACfC,wBAAa,SAASpE,aAAa7C,EAAb,CAAgBnD,OAAhB,CAAwB,KAAxB,EAA+B,GAA/B,CAAqC,EAD5C;AAEf6B,kBAAMmE,aAAaiE,IAAb,CAAkBpI,IAFT;AAGfwI,kBAAMrE,aAAaiE,IAAb,CAAkBI,IAHT;AAIflN,kBAAM6I,aAAaiE,IAAb,CAAkBK,QAJT;AAKf1H,iBAAKF,cAAcnF;AALJ,WAAhB;AAOA,iBAAO,KAAKgN,mBAAL,CAAyBJ,OAAzB,EAAkCnE,aAAaiE,IAAb,CAAkBC,oBAApD,EAA0E5H,UAA1E,EAAsFI,aAAtF,EAAqG,IAAIU,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAArG,EAA+JV,WAA/J,CAAP;AACA;;AACD;;AACD,WAAK,cAAL;AACC3J,eAAOK,KAAP,CAAagD,KAAb,CAAmB,8BAAnB;AACA;;AACD,WAAK,cAAL;AACCrD,eAAOK,KAAP,CAAagD,KAAb,CAAmB,gCAAnB;AACA;;AACD,WAAK,aAAL;AACC,YAAIoG,aAAaiD,WAAb,IAA4BjD,aAAaiD,WAAb,CAAyB,CAAzB,CAA5B,IAA2DjD,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B3C,IAA3F,EAAiG;AAChGV,yBAAe;AACdhD,iBAAKF,cAAcnF,GADL;AAEdiN,eAAG,gBAFW;AAGdnE,iBAAK,EAHS;AAIdE,eAAG;AACFhJ,mBAAK+E,WAAW/E,GADd;AAEFgF,wBAAUD,WAAWC;AAFnB,aAJW;AAQd0G,yBAAa,CAAC;AACb,sBAAS,KAAKpJ,mCAAL,CAAyCmG,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B3C,IAArE,CADI;AAEb,6BAAgBN,aAAaiD,WAAb,CAAyB,CAAzB,EAA4BwB,cAF/B;AAGb,6BAAgBC,yBAAyB1E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4BwB,cAArD,CAHH;AAIb,oBAAO,IAAIrH,IAAJ,CAASuD,SAASX,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B9F,EAA5B,CAA+ByD,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAT,IAAyD,IAAlE;AAJM,aAAD;AARC,WAAf;;AAgBA,cAAI,CAACV,WAAL,EAAkB;AACjBnJ,uBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BqD,sBAA3B,CAAmD,SAAS3E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B2B,UAAY,IAAI5E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B9F,EAA5B,CAA+BnD,OAA/B,CAAuC,KAAvC,EAA8C,GAA9C,CAAoD,EAA5J,EAA+J4F,aAAaW,CAA5K,EAA+K,IAA/K,EAAqL,IAAInD,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAArL;AACA;;AAED,iBAAOhB,YAAP;AACA,SAtBD,MAsBO;AACNrJ,iBAAOK,KAAP,CAAagD,KAAb,CAAmB,gCAAnB;AACA;;AACD;;AACD,WAAK,eAAL;AACCrD,eAAOK,KAAP,CAAagD,KAAb,CAAmB,+BAAnB;AACA;AA5IF;AA8IA;AAED;;;;;;;;AAQA;;;AACA2K,sBAAoBJ,OAApB,EAA6BU,YAA7B,EAA2CvI,UAA3C,EAAuDI,aAAvD,EAAsEoI,SAAtE,EAAiF5E,WAAjF,EAA8F;AAC7F,UAAM6E,gBAAgB,SAASC,IAAT,CAAcH,YAAd,IAA8B1M,KAA9B,GAAsCD,IAA5D;AACA,UAAM+M,YAAYhN,IAAIiN,KAAJ,CAAUL,YAAV,EAAwB,IAAxB,CAAlB;AACAI,cAAUE,OAAV,GAAoB;AAAE,uBAAkB,UAAU,KAAK5M,QAAU;AAA7C,KAApB;AACAwM,kBAAcvM,GAAd,CAAkByM,SAAlB,EAA6BpO,OAAOuO,eAAP,CAAwBC,MAAD,IAAY;AAC/D,YAAMC,YAAYC,WAAWC,QAAX,CAAoB,SAApB,CAAlB;AAEAF,gBAAUG,MAAV,CAAiBtB,OAAjB,EAA0BkB,MAA1B,EAAkC,CAAC1L,GAAD,EAAMsK,IAAN,KAAe;AAChD,YAAItK,GAAJ,EAAS;AACR,gBAAM,IAAI+L,KAAJ,CAAU/L,GAAV,CAAN;AACA,SAFD,MAEO;AACN,gBAAM1B,MAAMgM,KAAKhM,GAAL,CAAS+B,OAAT,CAAiBnD,OAAO8O,WAAP,EAAjB,EAAuC,GAAvC,CAAZ;AACA,gBAAMC,aAAa;AAClBC,mBAAO5B,KAAKpI,IADM;AAElBiK,wBAAY7N;AAFM,WAAnB;;AAKA,cAAI,aAAa+M,IAAb,CAAkBf,KAAK9M,IAAvB,CAAJ,EAAkC;AACjCyO,uBAAWG,SAAX,GAAuB9N,GAAvB;AACA2N,uBAAWI,UAAX,GAAwB/B,KAAK9M,IAA7B;AACAyO,uBAAWK,UAAX,GAAwBhC,KAAKI,IAA7B;AACAuB,uBAAWM,gBAAX,GAA8BjC,KAAKkC,QAAL,IAAiBlC,KAAKkC,QAAL,CAAc9B,IAA7D;AACA;;AACD,cAAI,aAAaW,IAAb,CAAkBf,KAAK9M,IAAvB,CAAJ,EAAkC;AACjCyO,uBAAWQ,SAAX,GAAuBnO,GAAvB;AACA2N,uBAAWS,UAAX,GAAwBpC,KAAK9M,IAA7B;AACAyO,uBAAWU,UAAX,GAAwBrC,KAAKI,IAA7B;AACA;;AACD,cAAI,aAAaW,IAAb,CAAkBf,KAAK9M,IAAvB,CAAJ,EAAkC;AACjCyO,uBAAWW,SAAX,GAAuBtO,GAAvB;AACA2N,uBAAWY,UAAX,GAAwBvC,KAAK9M,IAA7B;AACAyO,uBAAWa,UAAX,GAAwBxC,KAAKI,IAA7B;AACA;;AAED,gBAAMhE,MAAM;AACXzD,iBAAKuH,QAAQvH,GADF;AAEXO,gBAAI2H,SAFO;AAGXzE,iBAAK,EAHM;AAIX4D,kBAAM;AACL1M,mBAAK0M,KAAK1M;AADL,aAJK;AAOXmP,uBAAW,KAPA;AAQXzD,yBAAa,CAAC2C,UAAD;AARF,WAAZ;;AAWA,cAAI1F,WAAJ,EAAiB;AAChBG,gBAAIgD,QAAJ,GAAe,aAAf;AACA;;AAED,cAAIc,QAAQC,UAAR,IAAuB,OAAOD,QAAQC,UAAf,KAA8B,QAAzD,EAAoE;AACnE/D,gBAAI,KAAJ,IAAa8D,QAAQC,UAArB;AACA;;AAED,iBAAOrN,WAAWyK,WAAX,CAAuBlF,UAAvB,EAAmC+D,GAAnC,EAAwC3D,aAAxC,EAAuD,IAAvD,CAAP;AACA;AACD,OAhDD;AAiDA,KApD4B,CAA7B;AAqDA;;AAEDlD,4BAA0B;AACzBzC,eAAW4P,SAAX,CAAqBzP,GAArB,CAAyB,kBAAzB,EAA6C,KAAK0P,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA7C,EAA8E9P,WAAW4P,SAAX,CAAqBG,QAArB,CAA8BC,GAA5G,EAAiH,iBAAjH;AACAhQ,eAAW4P,SAAX,CAAqBzP,GAArB,CAAyB,oBAAzB,EAA+C,KAAK8P,qBAAL,CAA2BH,IAA3B,CAAgC,IAAhC,CAA/C,EAAsF9P,WAAW4P,SAAX,CAAqBG,QAArB,CAA8BC,GAApH,EAAyH,oBAAzH;AACAhQ,eAAW4P,SAAX,CAAqBzP,GAArB,CAAyB,aAAzB,EAAwC,KAAK+P,mBAAL,CAAyBJ,IAAzB,CAA8B,IAA9B,CAAxC,EAA6E9P,WAAW4P,SAAX,CAAqBG,QAArB,CAA8BC,GAA3G,EAAgH,yBAAhH;AACAhQ,eAAW4P,SAAX,CAAqBzP,GAArB,CAAyB,eAAzB,EAA0C,KAAKgQ,qBAAL,CAA2BL,IAA3B,CAAgC,IAAhC,CAA1C,EAAiF9P,WAAW4P,SAAX,CAAqBG,QAArB,CAA8BC,GAA/G,EAAoH,2BAApH;AACA;;AAEDtN,8BAA4B;AAC3B1C,eAAW4P,SAAX,CAAqBQ,MAArB,CAA4B,kBAA5B,EAAgD,iBAAhD;AACApQ,eAAW4P,SAAX,CAAqBQ,MAArB,CAA4B,oBAA5B,EAAkD,oBAAlD;AACApQ,eAAW4P,SAAX,CAAqBQ,MAArB,CAA4B,aAA5B,EAA2C,yBAA3C;AACApQ,eAAW4P,SAAX,CAAqBQ,MAArB,CAA4B,eAA5B,EAA6C,2BAA7C;AACA;;AAED5N,2BAAyB;AACxB,UAAM6N,gBAAgB,KAAK9O,WAAL,CAAiB8O,aAAvC;AACA,SAAKzO,GAAL,CAAS0O,EAAT,CAAYD,cAAcE,GAAd,CAAkBC,aAA9B,EAA6C,MAAM;AAClDhR,aAAOG,UAAP,CAAkB0C,IAAlB,CAAuB,oBAAvB;AACA,KAFD;AAIA,SAAKT,GAAL,CAAS0O,EAAT,CAAYD,cAAcE,GAAd,CAAkBE,mBAA9B,EAAmD,MAAM;AACxD,WAAKtO,UAAL;AACA,KAFD;AAIA,SAAKP,GAAL,CAAS0O,EAAT,CAAYD,cAAcE,GAAd,CAAkBG,UAA9B,EAA0C,MAAM;AAC/C,WAAKvO,UAAL;AACA,KAFD;AAIA,UAAMwO,aAAa,KAAKpP,WAAL,CAAiBoP,UAApC;AAEA;;;;;;;;;;;;;;AAaA,SAAK/O,GAAL,CAAS0O,EAAT,CAAYK,WAAWC,OAAvB,EAAgC9Q,OAAOuO,eAAP,CAAwBpF,YAAD,IAAkB;AACxEzJ,aAAOI,MAAP,CAAcoE,KAAd,CAAoB,wBAApB,EAA8CiF,YAA9C;;AACA,UAAIA,YAAJ,EAAkB;AACjB,aAAK2C,cAAL,CAAoB3C,YAApB;AACA;AACD,KAL+B,CAAhC;AAOA,SAAKrH,GAAL,CAAS0O,EAAT,CAAYK,WAAWE,cAAvB,EAAuC/Q,OAAOuO,eAAP,CAAwByC,WAAD,IAAiB;AAC9EtR,aAAOI,MAAP,CAAcoE,KAAd,CAAoB,+BAApB,EAAqD8M,WAArD;;AACA,UAAIA,WAAJ,EAAiB;AAChB,aAAKpF,oBAAL,CAA0BoF,WAA1B;AACA;AACD,KALsC,CAAvC;AAOA,SAAKlP,GAAL,CAAS0O,EAAT,CAAYK,WAAWI,gBAAvB,EAAyCjR,OAAOuO,eAAP,CAAwByC,WAAD,IAAiB;AAChFtR,aAAOI,MAAP,CAAcoE,KAAd,CAAoB,iCAApB,EAAuD8M,WAAvD;;AACA,UAAIA,WAAJ,EAAiB;AAChB,aAAKpG,sBAAL,CAA4BoG,WAA5B;AACA;AACD,KALwC,CAAzC;AAOA;;;;;;;;;;;;;;;;;AAgBA,SAAKlP,GAAL,CAAS0O,EAAT,CAAYK,WAAWK,eAAvB,EAAwClR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAxC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWM,cAAvB,EAAuCnR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAvC;AAEA;;;;;;;;AAOA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWO,YAAvB,EAAqCpR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC;AAEA;;;;;;;;;AAQA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWQ,eAAvB,EAAwCrR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAxC;AAEA;;;;;;;;;;;;;;AAaA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWS,cAAvB,EAAuCtR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWU,YAAvB,EAAqCvR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC;AAEA;;;;;;;;AAOA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWW,UAAvB,EAAmCxR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAnC;AAEA;;;;;;;;;;;;;;AAaA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWY,YAAvB,EAAqCzR,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAAKzM,GAAL,CAAS0O,EAAT,CAAYK,WAAWa,SAAvB,EAAkC1R,OAAOuO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAlC;AACA;;AAEDoD,mBAAiBC,iBAAjB,EAAoC;AACnClS,WAAOK,KAAP,CAAamE,KAAb,CAAmB,sCAAnB,EAA2D0N,iBAA3D;AACA,QAAIC,WAAWvN,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C;AAAd;AAAV,KAAhD,CAAf;;AACA,QAAImQ,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAcqN,QAAxB,CAA7B,IAAkEF,SAASnN,IAAT,CAAcqN,QAAd,CAAuBC,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,WAAK,MAAMvN,OAAX,IAAsBoN,SAASnN,IAAT,CAAcqN,QAApC,EAA8C;AAC7C,YAAItN,QAAQO,IAAR,KAAiB4M,iBAAjB,IAAsCnN,QAAQwN,SAAR,KAAsB,IAAhE,EAAsE;AACrE,iBAAOxN,OAAP;AACA;AACD;AACD;;AACDoN,eAAWvN,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C;AAAd;AAAV,KAA9C,CAAX;;AACA,QAAImQ,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAcwN,MAAxB,CAA7B,IAAgEL,SAASnN,IAAT,CAAcwN,MAAd,CAAqBF,MAArB,GAA8B,CAAlG,EAAqG;AACpG,WAAK,MAAMnN,KAAX,IAAoBgN,SAASnN,IAAT,CAAcwN,MAAlC,EAA0C;AACzC,YAAIrN,MAAMG,IAAN,KAAe4M,iBAAnB,EAAsC;AACrC,iBAAO/M,KAAP;AACA;AACD;AACD;AACD;;AAEDsN,oBAAkBtL,MAAlB,EAA0BuL,OAA1B,EAAmC;AAClC1S,WAAOK,KAAP,CAAamE,KAAb,CAAmB,4BAAnB;AACA,UAAM2N,WAAWvN,KAAK3C,GAAL,CAAU,yBAAyBkF,MAAQ,UAA3C,EAAsD;AAAEtC,cAAQ1D,EAAE8I,MAAF,CAAS;AAAEnF,eAAO,KAAK9C;AAAd,OAAT,EAAmC0Q,OAAnC;AAAV,KAAtD,CAAjB;;AACA,QAAIP,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAc2N,QAAxB,CAA7B,IAAkER,SAASnN,IAAT,CAAc2N,QAAd,CAAuBL,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,UAAIM,SAAS,CAAb;;AACA,WAAK,MAAMrM,OAAX,IAAsB4L,SAASnN,IAAT,CAAc2N,QAAd,CAAuBE,OAAvB,EAAtB,EAAwD;AACvD7S,eAAOK,KAAP,CAAamE,KAAb,CAAmB,WAAnB,EAAgC+B,OAAhC;;AACA,YAAI,CAACqM,MAAD,IAAWrM,QAAQK,EAAR,GAAagM,MAA5B,EAAoC;AACnCA,mBAASrM,QAAQK,EAAjB;AACA;;AACDL,gBAAQxB,OAAR,GAAkB2N,QAAQ3N,OAA1B;AACA,aAAKqH,cAAL,CAAoB7F,OAApB,EAA6B,IAA7B;AACA;;AACD,aAAO;AAAEuM,kBAAUX,SAASnN,IAAT,CAAc8N,QAA1B;AAAoClM,YAAIgM;AAAxC,OAAP;AACA;AACD;;AAEDG,uBAAqB1M,GAArB,EAA0B2M,UAA1B,EAAsC;AACrChT,WAAOK,KAAP,CAAamE,KAAb,CAAmB,iDAAnB,EAAsEwO,WAAWtN,EAAjF,EAAqFW,GAArF;AACA,UAAM8L,WAAWvN,KAAK3C,GAAL,CAAU,yBAAyB+Q,WAAW7L,MAAQ,OAAtD,EAA8D;AAAEtC,cAAQ;AAAEC,eAAO,KAAK9C,QAAd;AAAwB+C,iBAASiO,WAAWtN;AAA5C;AAAV,KAA9D,CAAjB;;AACA,QAAIyM,YAAYA,SAASnN,IAAzB,EAA+B;AAC9B,YAAMA,OAAOgO,WAAW7L,MAAX,KAAsB,UAAtB,GAAmCgL,SAASnN,IAAT,CAAcD,OAAjD,GAA2DoN,SAASnN,IAAT,CAAcG,KAAtF;;AACA,UAAIH,QAAQ7D,EAAEiR,OAAF,CAAUpN,KAAKa,OAAf,CAAR,IAAmCb,KAAKa,OAAL,CAAayM,MAAb,GAAsB,CAA7D,EAAgE;AAC/D,aAAK,MAAM1M,MAAX,IAAqBZ,KAAKa,OAA1B,EAAmC;AAClC,gBAAM0B,OAAO,KAAK3D,cAAL,CAAoBgC,MAApB,KAA+B,KAAK/B,aAAL,CAAmB+B,MAAnB,CAA5C;;AACA,cAAI2B,IAAJ,EAAU;AACTvH,mBAAOK,KAAP,CAAamE,KAAb,CAAmB,qBAAnB,EAA0C+C,KAAKvB,QAA/C,EAAyDK,GAAzD;AACA7F,uBAAWuM,aAAX,CAAyB1G,GAAzB,EAA8BkB,IAA9B,EAAoC,IAApC,EAA0C,IAA1C;AACA;AACD;AACD;;AAED,UAAIP,QAAQ,EAAZ;AACA,UAAIiM,iBAAiB,CAArB;AACA,UAAIC,gBAAgB,IAApB;;AACA,UAAIlO,QAAQA,KAAKgC,KAAb,IAAsBhC,KAAKgC,KAAL,CAAW/F,KAArC,EAA4C;AAC3C+F,gBAAQhC,KAAKgC,KAAL,CAAW/F,KAAnB;AACAgS,yBAAiBjO,KAAKgC,KAAL,CAAWC,QAA5B;AACAiM,wBAAgBlO,KAAKgC,KAAL,CAAWlB,OAA3B;AACA;;AAED,UAAId,QAAQA,KAAKkC,OAAb,IAAwBlC,KAAKkC,OAAL,CAAajG,KAAzC,EAAgD;AAC/C,YAAIgS,cAAJ,EAAoB;AACnB,cAAIA,iBAAiBjO,KAAKkC,OAAL,CAAaD,QAAlC,EAA4C;AAC3CD,oBAAQhC,KAAKkC,OAAL,CAAaF,KAArB;AACAkM,4BAAgBlO,KAAKkC,OAAL,CAAapB,OAA7B;AACA;AACD,SALD,MAKO;AACNkB,kBAAQhC,KAAKkC,OAAL,CAAaF,KAArB;AACAkM,0BAAgBlO,KAAKkC,OAAL,CAAapB,OAA7B;AACA;AACD;;AAED,UAAIkB,KAAJ,EAAW;AACV,cAAMlB,UAAU,KAAKlC,cAAL,CAAoBsP,aAApB,KAAsC,KAAKrP,aAAL,CAAmBqP,aAAnB,CAAtD;AACAlT,eAAOK,KAAP,CAAamE,KAAb,CAAmB,oBAAnB,EAAyC6B,GAAzC,EAA8CW,KAA9C,EAAqDlB,QAAQE,QAA7D;AACAxF,mBAAW6M,aAAX,CAAyBhH,GAAzB,EAA8BW,KAA9B,EAAqClB,OAArC,EAA8C,KAA9C;AACA;AACD;AACD;;AAEDqN,WAAS9M,GAAT,EAAc2M,UAAd,EAA0B;AACzB,UAAMb,WAAWvN,KAAK3C,GAAL,CAAS,iCAAT,EAA4C;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C,QAAd;AAAwB+C,iBAASiO,WAAWtN;AAA5C;AAAV,KAA5C,CAAjB;;AACA,QAAIyM,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAcoO,KAAxB,CAA7B,IAA+DjB,SAASnN,IAAT,CAAcoO,KAAd,CAAoBd,MAApB,GAA6B,CAAhG,EAAmG;AAClG,WAAK,MAAMe,GAAX,IAAkBlB,SAASnN,IAAT,CAAcoO,KAAhC,EAAuC;AACtC,YAAIC,IAAI9M,OAAR,EAAiB;AAChB,gBAAMgB,OAAO,KAAK3D,cAAL,CAAoByP,IAAI9M,OAAJ,CAAYgB,IAAhC,CAAb;AACA,gBAAM+L,SAAS;AACdjN,eADc;AAEd4H,eAAG,gBAFW;AAGdnE,iBAAK,EAHS;AAIdE,eAAG;AACFhJ,mBAAKuG,KAAKvG,GADR;AAEFgF,wBAAUuB,KAAKvB;AAFb,aAJW;AAQd0G,yBAAa,CAAC;AACb,sBAAS,KAAKpJ,mCAAL,CAAyC+P,IAAI9M,OAAJ,CAAYwD,IAArD,CADI;AAEb,6BAAgBxC,KAAKvB,QAFR;AAGb,6BAAgBmI,yBAAyB5G,KAAKvB,QAA9B,CAHH;AAIb,oBAAO,IAAIa,IAAJ,CAASuD,SAASiJ,IAAI9M,OAAJ,CAAYK,EAAZ,CAAeyD,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAT,IAAyC,IAAlD;AAJM,aAAD;AARC,WAAf;AAgBA7J,qBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BqD,sBAA3B,CAAmD,SAASiF,IAAItO,OAAS,IAAIsO,IAAI9M,OAAJ,CAAYK,EAAZ,CAAenD,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAoC,EAAjH,EAAoH6P,OAAOtJ,CAA3H,EAA8H,IAA9H,EAAoI,IAAInD,IAAJ,CAASuD,SAASiJ,IAAI9M,OAAJ,CAAYK,EAAZ,CAAeyD,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAT,IAAyC,IAAlD,CAApI;AACA;AACD;AACD;AACD;;AAEDkJ,iBAAelN,GAAf,EAAoBmN,QAApB,EAA8B;AAC7BxT,WAAOK,KAAP,CAAawC,IAAb,CAAkB,kBAAlB,EAAsCwD,GAAtC;AACA,UAAMoN,kBAAkBjT,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoCf,GAApC,CAAxB;;AACA,QAAIoN,eAAJ,EAAqB;AACpB,UAAI,KAAKlR,eAAL,CAAqB8D,GAArB,CAAJ,EAA+B;AAC9B,aAAK0M,oBAAL,CAA0B1M,GAA1B,EAA+B,KAAK9D,eAAL,CAAqB8D,GAArB,CAA/B;AAEArG,eAAOK,KAAP,CAAamE,KAAb,CAAmB,8CAAnB,EAAmE,KAAKjC,eAAL,CAAqB8D,GAArB,CAAnE,EAA8FA,GAA9F;AACA,YAAIqN,UAAU,KAAKjB,iBAAL,CAAuB,KAAKlQ,eAAL,CAAqB8D,GAArB,EAA0Bc,MAAjD,EAAyD;AAAEpC,mBAAS,KAAKxC,eAAL,CAAqB8D,GAArB,EAA0BX,EAArC;AAAyCiO,kBAAQ;AAAjD,SAAzD,CAAd;;AACA,eAAOD,WAAWA,QAAQZ,QAA1B,EAAoC;AACnCY,oBAAU,KAAKjB,iBAAL,CAAuB,KAAKlQ,eAAL,CAAqB8D,GAArB,EAA0Bc,MAAjD,EAAyD;AAAEpC,qBAAS,KAAKxC,eAAL,CAAqB8D,GAArB,EAA0BX,EAArC;AAAyCiO,oBAAQD,QAAQ9M;AAAzD,WAAzD,CAAV;AACA;;AAED5G,eAAOK,KAAP,CAAamE,KAAb,CAAmB,+CAAnB,EAAoE,KAAKjC,eAAL,CAAqB8D,GAArB,CAApE,EAA+FA,GAA/F;AACA,aAAK8M,QAAL,CAAc9M,GAAd,EAAmB,KAAK9D,eAAL,CAAqB8D,GAArB,CAAnB;AAEA,eAAOmN,UAAP;AACA,OAbD,MAaO;AACN,cAAMI,aAAa,KAAK3B,gBAAL,CAAsBwB,gBAAgBnO,IAAtC,CAAnB;;AACA,YAAIsO,UAAJ,EAAgB;AACf,eAAKrR,eAAL,CAAqB8D,GAArB,IAA4B;AAAEX,gBAAIkO,WAAWlO,EAAjB;AAAqByB,oBAAQyM,WAAWlO,EAAX,CAAcf,MAAd,CAAqB,CAArB,MAA4B,GAA5B,GAAkC,UAAlC,GAA+C;AAA5E,WAA5B;AACA,iBAAO,KAAK4O,cAAL,CAAoBlN,GAApB,EAAyBmN,QAAzB,CAAP;AACA,SAHD,MAGO;AACNxT,iBAAOK,KAAP,CAAagD,KAAb,CAAmB,+CAAnB,EAAoEoQ,gBAAgBnO,IAApF;AACA,iBAAOkO,SAAS,IAAIlT,OAAO6O,KAAX,CAAiB,4BAAjB,EAA+C,+CAA/C,CAAT,CAAP;AACA;AACD;AACD,KAxBD,MAwBO;AACNnP,aAAOK,KAAP,CAAagD,KAAb,CAAmB,mDAAnB,EAAwEgD,GAAxE;AACA,aAAOmN,SAAS,IAAIlT,OAAO6O,KAAX,CAAiB,oBAAjB,EAAuC,cAAvC,CAAT,CAAP;AACA;AACD;;AAEDhM,4BAA0B;AACzBnD,WAAOK,KAAP,CAAamE,KAAb,CAAmB,wBAAnB;AACA,QAAI2N,WAAWvN,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C;AAAd;AAAV,KAAhD,CAAf;;AACA,QAAImQ,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAcqN,QAAxB,CAA7B,IAAkEF,SAASnN,IAAT,CAAcqN,QAAd,CAAuBC,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,WAAK,MAAMuB,YAAX,IAA2B1B,SAASnN,IAAT,CAAcqN,QAAzC,EAAmD;AAClD,cAAMoB,kBAAkBjT,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsCwO,aAAavO,IAAnD,EAAyD;AAAEgF,kBAAQ;AAAEtJ,iBAAK;AAAP;AAAV,SAAzD,CAAxB;;AACA,YAAIyS,eAAJ,EAAqB;AACpB,eAAKlR,eAAL,CAAqBkR,gBAAgBzS,GAArC,IAA4C;AAAE0E,gBAAImO,aAAanO,EAAnB;AAAuByB,oBAAQ0M,aAAanO,EAAb,CAAgBf,MAAhB,CAAuB,CAAvB,MAA8B,GAA9B,GAAoC,UAApC,GAAiD;AAAhF,WAA5C;AACA;AACD;AACD;;AACDwN,eAAWvN,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,cAAQ;AAAEC,eAAO,KAAK9C;AAAd;AAAV,KAA9C,CAAX;;AACA,QAAImQ,YAAYA,SAASnN,IAArB,IAA6B7D,EAAEiR,OAAF,CAAUD,SAASnN,IAAT,CAAcwN,MAAxB,CAA7B,IAAgEL,SAASnN,IAAT,CAAcwN,MAAd,CAAqBF,MAArB,GAA8B,CAAlG,EAAqG;AACpG,WAAK,MAAMwB,UAAX,IAAyB3B,SAASnN,IAAT,CAAcwN,MAAvC,EAA+C;AAC9C,cAAMiB,kBAAkBjT,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsCyO,WAAWxO,IAAjD,EAAuD;AAAEgF,kBAAQ;AAAEtJ,iBAAK;AAAP;AAAV,SAAvD,CAAxB;;AACA,YAAIyS,eAAJ,EAAqB;AACpB,eAAKlR,eAAL,CAAqBkR,gBAAgBzS,GAArC,IAA4C;AAAE0E,gBAAIoO,WAAWpO,EAAjB;AAAqByB,oBAAQ2M,WAAWpO,EAAX,CAAcf,MAAd,CAAqB,CAArB,MAA4B,GAA5B,GAAkC,UAAlC,GAA+C;AAA5E,WAA5C;AACA;AACD;AACD;AACD;;AAED8L,wBAAsBsD,oBAAtB,EAA4C;AAC3C/T,WAAOK,KAAP,CAAamE,KAAb,CAAmB,uBAAnB,EAA4CuP,oBAA5C;AAEA,SAAKC,wBAAL,CAA8BD,oBAA9B;AACA;;AAEDrD,sBAAoBuD,WAApB,EAAiCtI,QAAjC,EAA2C;AAC1C3L,WAAOK,KAAP,CAAamE,KAAb,CAAmB,qBAAnB;;AAEA,QAAIyP,eAAetI,QAAnB,EAA6B;AAC5B,UAAI,KAAKnJ,YAAL,CAAkB0R,MAAlB,CAA0B,MAAMD,WAAa,GAAGtI,QAAU,EAA1D,CAAJ,EAAkE;AACjE;AACA;AACA;;AACD,YAAMN,YAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuC6M,WAAvC,CAAlB;;AACA,UAAI5I,SAAJ,EAAe;AACd,cAAMwI,eAAe,KAAKtR,eAAL,CAAqB8I,UAAUhF,GAA/B,EAAoCX,EAAzD;AACA,cAAMyO,UAAU,KAAKC,UAAL,CAAgB/I,SAAhB,CAAhB;AACA,aAAKgJ,wBAAL,CAA8B1I,SAASlI,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAA9B,EAA0DoQ,YAA1D,EAAwEM,OAAxE;AACA;AACD;AACD;;AAEDxD,wBAAsBsD,WAAtB,EAAmCtI,QAAnC,EAA6C;AAC5C3L,WAAOK,KAAP,CAAamE,KAAb,CAAmB,uBAAnB;;AAEA,QAAIyP,eAAetI,QAAnB,EAA6B;AAC5B,UAAI,KAAKnJ,YAAL,CAAkB0R,MAAlB,CAA0B,QAAQD,WAAa,GAAGtI,QAAU,EAA5D,CAAJ,EAAoE;AACnE;AACA;AACA;;AAED,YAAMN,YAAY7K,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuC6M,WAAvC,CAAlB;;AACA,UAAI5I,SAAJ,EAAe;AACd,cAAMwI,eAAe,KAAKtR,eAAL,CAAqB8I,UAAUhF,GAA/B,EAAoCX,EAAzD;AACA,cAAMyO,UAAU,KAAKC,UAAL,CAAgB/I,SAAhB,CAAhB;AACA,aAAKiJ,yBAAL,CAA+B3I,SAASlI,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAA/B,EAA2DoQ,YAA3D,EAAyEM,OAAzE;AACA;AACD;AACD;;AAED9D,kBAAgBkE,aAAhB,EAA+B;AAC9BvU,WAAOK,KAAP,CAAamE,KAAb,CAAmB,iBAAnB,EAAsC+P,aAAtC;;AAEA,QAAIA,cAAcpK,QAAlB,EAA4B;AAC3B;AACA,WAAKqK,2BAAL,CAAiCD,aAAjC;AACA,aAAOA,aAAP;AACA,KAP6B,CAQ9B;;;AACA,QAAIA,cAAcvT,GAAd,CAAkBwJ,OAAlB,CAA0B,QAA1B,MAAwC,CAA5C,EAA+C;AAC9C,aAAO+J,aAAP;AACA,KAX6B,CAa9B;;;AACA,UAAME,mBAAmBjU,WAAWC,QAAX,CAAoBwB,GAApB,CAAwB,qBAAxB,IAAiDd,EAAEuT,IAAF,CAAO,KAAKnS,eAAZ,CAAjD,GAAgFpB,EAAEwT,KAAF,CAAQnU,WAAWC,QAAX,CAAoBwB,GAApB,CAAwB,0BAAxB,CAAR,EAA6D,KAA7D,KAAuE,EAAhL,CAd8B,CAe9B;;AACA,QAAIwS,iBAAiBjK,OAAjB,CAAyB+J,cAAclO,GAAvC,MAAgD,CAAC,CAArD,EAAwD;AACvD,WAAKuO,kBAAL,CAAwB,KAAKrS,eAAL,CAAqBgS,cAAclO,GAAnC,CAAxB,EAAiEkO,aAAjE;AACA;;AACD,WAAOA,aAAP;AACA;AAED;;;;;AAGAF,2BAAyB1I,QAAzB,EAAmCkI,YAAnC,EAAiDM,OAAjD,EAA0D;AACzD,QAAIxI,YAAYkI,YAAZ,IAA4BM,OAAhC,EAAyC;AACxC,YAAMnP,OAAO;AACZF,eAAO,KAAK9C,QADA;AAEZsD,cAAMqG,QAFM;AAGZ5G,iBAAS8O,YAHG;AAIZgB,mBAAWV;AAJC,OAAb;AAOAnU,aAAOK,KAAP,CAAamE,KAAb,CAAmB,+BAAnB;AACA,YAAMsQ,aAAalQ,KAAKmQ,IAAL,CAAU,qCAAV,EAAiD;AAAElQ,gBAAQG;AAAV,OAAjD,CAAnB;;AACA,UAAI8P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW9P,IAA5C,IAAoD8P,WAAW9P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpFjF,eAAOK,KAAP,CAAamE,KAAb,CAAmB,yBAAnB;AACA;AACD;AACD;AAED;;;;;AAGA8P,4BAA0B3I,QAA1B,EAAoCkI,YAApC,EAAkDM,OAAlD,EAA2D;AAC1D,QAAIxI,YAAYkI,YAAZ,IAA4BM,OAAhC,EAAyC;AACxC,YAAMnP,OAAO;AACZF,eAAO,KAAK9C,QADA;AAEZsD,cAAMqG,QAFM;AAGZ5G,iBAAS8O,YAHG;AAIZgB,mBAAWV;AAJC,OAAb;AAOAnU,aAAOK,KAAP,CAAamE,KAAb,CAAmB,kCAAnB;AACA,YAAMsQ,aAAalQ,KAAKmQ,IAAL,CAAU,wCAAV,EAAoD;AAAElQ,gBAAQG;AAAV,OAApD,CAAnB;;AACA,UAAI8P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW9P,IAA5C,IAAoD8P,WAAW9P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpFjF,eAAOK,KAAP,CAAamE,KAAb,CAAmB,6BAAnB;AACA;AACD;AACD;;AAEDwP,2BAAyBO,aAAzB,EAAwC;AACvC,QAAIA,aAAJ,EAAmB;AAClB,YAAMvP,OAAO;AACZF,eAAO,KAAK9C,QADA;AAEZ4E,YAAI,KAAKwN,UAAL,CAAgBG,aAAhB,CAFQ;AAGZxP,iBAAS,KAAKxC,eAAL,CAAqBgS,cAAclO,GAAnC,EAAwCX,EAHrC;AAIZuP,iBAAS;AAJG,OAAb;AAOAjV,aAAOK,KAAP,CAAamE,KAAb,CAAmB,8BAAnB,EAAmDQ,IAAnD;AACA,YAAM8P,aAAalQ,KAAKmQ,IAAL,CAAU,mCAAV,EAA+C;AAAElQ,gBAAQG;AAAV,OAA/C,CAAnB;;AACA,UAAI8P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW9P,IAA5C,IAAoD8P,WAAW9P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpFjF,eAAOK,KAAP,CAAamE,KAAb,CAAmB,0BAAnB;AACA;AACD;AACD;;AAEDoQ,qBAAmBf,YAAnB,EAAiCU,aAAjC,EAAgD;AAC/C,QAAIV,gBAAgBA,aAAanO,EAAjC,EAAqC;AACpC,UAAIwP,UAAU/G,yBAAyBoG,cAAcvK,CAAd,IAAmBuK,cAAcvK,CAAd,CAAgBhE,QAA5D,CAAd;;AACA,UAAIkP,OAAJ,EAAa;AACZA,kBAAU5U,OAAO8O,WAAP,GAAqB3L,OAArB,CAA6B,KAA7B,EAAoC,EAApC,IAA0CyR,OAApD;AACA;;AACD,YAAMlQ,OAAO;AACZF,eAAO,KAAK9C,QADA;AAEZ+H,cAAMwK,cAAczK,GAFR;AAGZ/E,iBAAS8O,aAAanO,EAHV;AAIZM,kBAAUuO,cAAcvK,CAAd,IAAmBuK,cAAcvK,CAAd,CAAgBhE,QAJjC;AAKZmP,kBAAUD,OALE;AAMZE,oBAAY;AANA,OAAb;AAQApV,aAAOK,KAAP,CAAamE,KAAb,CAAmB,uBAAnB,EAA4CQ,IAA5C;AACA,YAAM8P,aAAalQ,KAAKmQ,IAAL,CAAU,wCAAV,EAAoD;AAAElQ,gBAAQG;AAAV,OAApD,CAAnB;;AACA,UAAI8P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW9P,IAA5C,IAAoD8P,WAAW9P,IAAX,CAAgBuB,OAApE,IAA+EuO,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwB2C,MAAvG,IAAiH4L,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAA7I,EAAiJ;AAChJpG,mBAAW0D,MAAX,CAAkB6G,QAAlB,CAA2BsK,uBAA3B,CAAmDd,cAAcvT,GAAjE,EAAsE8T,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwB2C,MAA9F,EAAsG4L,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAA9H;AACA5G,eAAOK,KAAP,CAAamE,KAAb,CAAoB,eAAe+P,cAAcvT,GAAK,eAAe8T,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAAI,eAAekO,WAAW9P,IAAX,CAAgBuB,OAAhB,CAAwB2C,MAAQ,EAAhJ;AACA;AACD;AACD;AAED;;;;;AAGAoM,2BAAyBzB,YAAzB,EAAuCU,aAAvC,EAAsD;AACrD,QAAIV,gBAAgBA,aAAanO,EAAjC,EAAqC;AACpC,YAAMV,OAAO;AACZF,eAAO,KAAK9C,QADA;AAEZ4E,YAAI,KAAKwN,UAAL,CAAgBG,aAAhB,CAFQ;AAGZxP,iBAAS8O,aAAanO,EAHV;AAIZqE,cAAMwK,cAAczK,GAJR;AAKZmL,iBAAS;AALG,OAAb;AAOAjV,aAAOK,KAAP,CAAamE,KAAb,CAAmB,6BAAnB,EAAkDQ,IAAlD;AACA,YAAM8P,aAAalQ,KAAKmQ,IAAL,CAAU,mCAAV,EAA+C;AAAElQ,gBAAQG;AAAV,OAA/C,CAAnB;;AACA,UAAI8P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW9P,IAA5C,IAAoD8P,WAAW9P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpFjF,eAAOK,KAAP,CAAamE,KAAb,CAAmB,0BAAnB;AACA;AACD;AACD;;AAEDgQ,8BAA4BD,aAA5B,EAA2C;AAC1C,QAAIA,aAAJ,EAAmB;AAClB,UAAIA,cAAcgB,cAAlB,EAAkC;AACjC;AACA,eAAOhB,cAAcgB,cAArB;AACA;AACA,OALiB,CAOlB;;;AACA,YAAM1B,eAAe,KAAKtR,eAAL,CAAqBgS,cAAclO,GAAnC,CAArB;AACA,WAAKiP,wBAAL,CAA8BzB,YAA9B,EAA4CU,aAA5C;AACA;AACD;AAED;;;;;AAGAlI,6BAA2B5C,YAA3B,EAAyC;AACxC,QAAIA,aAAa+L,gBAAjB,EAAmC;AAClC,YAAMrP,gBAAgB,KAAKsP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,YAAM1D,aAAavF,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEkD,gBAAQ;AAAEtE,oBAAU;AAAZ;AAAV,OAAlD,CAAnB;;AAEA,UAAIG,iBAAiBJ,UAArB,EAAiC;AAChC;AACA,YAAIsD,eAAe7I,WAAW0D,MAAX,CAAkB6G,QAAlB,CACjBC,6BADiB,CACavB,aAAa+L,gBAAb,CAA8BtM,MAD3C,EACmDO,aAAa+L,gBAAb,CAA8B5O,EADjF,CAAnB;;AAGA,YAAI,CAACyC,YAAL,EAAmB;AAClB;AACA,gBAAMrI,MAAM,KAAKyK,cAAL,CAAoBhC,aAAa1E,OAAjC,EAA0C0E,aAAa+L,gBAAb,CAA8B5O,EAAxE,CAAZ;;AACAyC,yBAAe7I,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuCpG,GAAvC,CAAf;AACA;;AAED,YAAIqI,YAAJ,EAAkB;AACjB7I,qBAAWkV,aAAX,CAAyBrM,YAAzB,EAAuCtD,UAAvC;AACA/F,iBAAOK,KAAP,CAAamE,KAAb,CAAmB,iCAAnB;AACA;AACD;AACD;AACD;AAED;;;;;AAGA8H,6BAA2B7C,YAA3B,EAAyC;AACxC,QAAIA,aAAa+L,gBAAjB,EAAmC;AAClC,YAAMG,aAAanV,WAAW0D,MAAX,CAAkB6G,QAAlB,CAA2B3D,WAA3B,CAAuC,KAAKqE,cAAL,CAAoBhC,aAAa1E,OAAjC,EAA0C0E,aAAalD,OAAb,CAAqBK,EAA/D,CAAvC,CAAnB,CADkC,CAGlC;;AACA,UAAI+O,cAAelM,aAAalD,OAAb,CAAqBwD,IAArB,KAA8B4L,WAAW7L,GAA5D,EAAkE;AACjE,cAAM3D,gBAAgB,KAAKsP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,cAAM1D,aAAa0D,aAAa+L,gBAAb,CAA8BjO,IAA9B,GAAqC,KAAK3D,cAAL,CAAoB6F,aAAa+L,gBAAb,CAA8BjO,IAAlD,KAA2D,KAAK1D,aAAL,CAAmB4F,aAAa+L,gBAAb,CAA8BjO,IAAjD,CAAhG,GAAyJ,IAA5K;AAEA,cAAM8B,eAAe;AACpB;AACArI,eAAK,KAAKyK,cAAL,CAAoBhC,aAAa1E,OAAjC,EAA0C0E,aAAa+L,gBAAb,CAA8B5O,EAAxE,CAFe;AAGpBP,eAAKF,cAAcnF,GAHC;AAIpB8I,eAAK,KAAKxG,mCAAL,CAAyCmG,aAAalD,OAAb,CAAqBwD,IAA9D,CAJe;AAKpBwL,0BAAgB,IALI,CAKC;;AALD,SAArB;AAQA/U,mBAAWoV,aAAX,CAAyBvM,YAAzB,EAAuCtD,UAAvC;AACA/F,eAAOK,KAAP,CAAamE,KAAb,CAAmB,iCAAnB;AACA;AACD;AACD;AAED;;;;;AAGA+H,yBAAuB9C,YAAvB,EAAqCE,WAArC,EAAkD;AACjD,UAAMxD,gBAAgB,KAAKsP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,QAAI1D,aAAa,IAAjB;;AACA,QAAI0D,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3C7D,mBAAavF,WAAW0D,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEkD,gBAAQ;AAAEtE,oBAAU;AAAZ;AAAV,OAAlD,CAAb;AACA,KAFD,MAEO;AACND,mBAAa0D,aAAalC,IAAb,GAAoB,KAAK3D,cAAL,CAAoB6F,aAAalC,IAAjC,KAA0C,KAAK1D,aAAL,CAAmB4F,aAAalC,IAAhC,CAA9D,GAAsG,IAAnH;AACA;;AACD,QAAIpB,iBAAiBJ,UAArB,EAAiC;AAChC,YAAM8P,kBAAkB;AACvB7U,aAAK,KAAKyK,cAAL,CAAoBhC,aAAa1E,OAAjC,EAA0C0E,aAAa7C,EAAvD,CADkB;AAEvBA,YAAI,IAAIC,IAAJ,CAASuD,SAASX,aAAa7C,EAAb,CAAgByD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD;AAFmB,OAAxB;;AAIA,UAAIV,WAAJ,EAAiB;AAChBkM,wBAAgB,UAAhB,IAA8B,aAA9B;AACA;;AACD,UAAI;AACH,aAAKrM,0BAAL,CAAgCrD,aAAhC,EAA+CJ,UAA/C,EAA2D0D,YAA3D,EAAyEoM,eAAzE,EAA0FlM,WAA1F;AACA,OAFD,CAEE,OAAOrD,CAAP,EAAU;AACX;AACA;AACA,YAAIA,EAAEhB,IAAF,KAAW,YAAX,IAA2BgB,EAAEwP,IAAF,KAAW,KAA1C,EAAiD;AAChD;AACA;;AAED,cAAMxP,CAAN;AACA;AACD;AACD;AAED;;;;;;;;AAMA8N,aAAW/I,SAAX,EAAsB;AACrB;AACA,QAAI8I,OAAJ;;AACA,QAAI4B,QAAQ1K,UAAUrK,GAAV,CAAcwJ,OAAd,CAAsB,QAAtB,CAAZ;;AACA,QAAIuL,UAAU,CAAd,EAAiB;AAChB;AACA5B,gBAAU9I,UAAUrK,GAAV,CAAcgV,MAAd,CAAqB,CAArB,EAAwB3K,UAAUrK,GAAV,CAAcsR,MAAtC,CAAV;AACAyD,cAAQ5B,QAAQ3J,OAAR,CAAgB,GAAhB,CAAR;AACA2J,gBAAUA,QAAQ6B,MAAR,CAAeD,QAAM,CAArB,EAAwB5B,QAAQ7B,MAAhC,CAAV;AACA6B,gBAAUA,QAAQ1Q,OAAR,CAAgB,GAAhB,EAAqB,GAArB,CAAV;AACA,KAND,MAMO;AACN;AACA0Q,gBAAU9I,UAAU4K,OAApB;AACA;;AAED,WAAO9B,OAAP;AACA;;AAEDsB,mBAAiBhM,YAAjB,EAA+B;AAC9B,WAAOA,aAAa1E,OAAb,GAAuB,KAAKf,iBAAL,CAAuByF,aAAa1E,OAApC,KAAgD,KAAKV,gBAAL,CAAsBoF,aAAa1E,OAAnC,CAAvE,GAAqH,IAA5H;AACA;;AAEDqG,gBAAc8K,SAAd,EAAyB;AACxB,WAAOA,YAAY,KAAKtS,cAAL,CAAoBsS,SAApB,KAAkC,KAAKrS,aAAL,CAAmBqS,SAAnB,CAA9C,GAA8E,IAArF;AACA;;AAEDzK,iBAAeoI,YAAf,EAA6BjN,EAA7B,EAAiC;AAChC,WAAQ,SAASiN,YAAc,IAAIjN,GAAGnD,OAAH,CAAW,KAAX,EAAkB,GAAlB,CAAwB,EAA3D;AACA;;AA50CgB;;AAg1ClBjD,WAAWqB,WAAX,GAAyB,IAAIA,WAAJ,EAAzB,C;;;;;;;;;;;ACv1CA;AACA,SAASsU,iBAAT,CAA2BC,OAA3B,EAAoCvR,MAApC,EAA4C0G,IAA5C,EAAkD;AACjD,MAAI6K,YAAY,oBAAZ,IAAoC,CAACC,MAAM5H,IAAN,CAAW5J,MAAX,EAAmByR,MAAnB,CAAzC,EAAqE;AACpE;AACA;;AAED,QAAMC,OAAO/V,WAAW0D,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoCmE,KAAKlF,GAAzC,CAAb;AACA,QAAMtB,UAAUwR,KAAKjR,IAArB;AACA,QAAMiC,OAAOjH,OAAOkW,KAAP,CAAaC,OAAb,CAAqBnW,OAAOqD,MAAP,EAArB,CAAb;AAEA+S,YAAUC,IAAV,CAAepL,KAAKlF,GAApB,EAAyB;AACxBrF,SAAKkH,OAAOxC,EAAP,EADmB;AAExBW,SAAKkF,KAAKlF,GAFc;AAGxB2D,OAAG;AAAEhE,gBAAU;AAAZ,KAHqB;AAIxBY,QAAI,IAAIC,IAAJ,EAJoB;AAKxBiD,SAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,mBAAa,SADuB;AAEpCC,eAAS,CAACxP,KAAKvB,QAAN,EAAgBjB,OAAhB;AAF2B,KAAhC,EAGFwC,KAAKyP,QAHH;AALmB,GAAzB;;AAWA,MAAI;AACHxW,eAAWqB,WAAX,CAAuB0R,cAAvB,CAAsChI,KAAKlF,GAA3C,EAAgDhD,SAAS;AACxD,UAAIA,KAAJ,EAAW;AACVqT,kBAAUC,IAAV,CAAepL,KAAKlF,GAApB,EAAyB;AACxBrF,eAAKkH,OAAOxC,EAAP,EADmB;AAExBW,eAAKkF,KAAKlF,GAFc;AAGxB2D,aAAG;AAAEhE,sBAAU;AAAZ,WAHqB;AAIxBY,cAAI,IAAIC,IAAJ,EAJoB;AAKxBiD,eAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,yBAAa,SADuB;AAEpCC,qBAAS,CAAChS,OAAD,EAAU1B,MAAMkD,OAAhB;AAF2B,WAAhC,EAGFgB,KAAKyP,QAHH;AALmB,SAAzB;AAUA,OAXD,MAWO;AACNN,kBAAUC,IAAV,CAAepL,KAAKlF,GAApB,EAAyB;AACxBrF,eAAKkH,OAAOxC,EAAP,EADmB;AAExBW,eAAKkF,KAAKlF,GAFc;AAGxB2D,aAAG;AAAEhE,sBAAU;AAAZ,WAHqB;AAIxBY,cAAI,IAAIC,IAAJ,EAJoB;AAKxBiD,eAAK8M,QAAQC,EAAR,CAAW,oBAAX,EAAiC;AACrCC,yBAAa,SADwB;AAErCC,qBAAS,CAAChS,OAAD;AAF4B,WAAjC,EAGFwC,KAAKyP,QAHH;AALmB,SAAzB;AAUA;AACD,KAxBD;AAyBA,GA1BD,CA0BE,OAAO3T,KAAP,EAAc;AACfqT,cAAUC,IAAV,CAAepL,KAAKlF,GAApB,EAAyB;AACxBrF,WAAKkH,OAAOxC,EAAP,EADmB;AAExBW,WAAKkF,KAAKlF,GAFc;AAGxB2D,SAAG;AAAEhE,kBAAU;AAAZ,OAHqB;AAIxBY,UAAI,IAAIC,IAAJ,EAJoB;AAKxBiD,WAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,qBAAa,SADuB;AAEpCC,iBAAS,CAAChS,OAAD,EAAU1B,MAAMkD,OAAhB;AAF2B,OAAhC,EAGFgB,KAAKyP,QAHH;AALmB,KAAzB;AAUA,UAAM3T,KAAN;AACA;;AACD,SAAO8S,iBAAP;AACA;;AAED3V,WAAWyW,aAAX,CAAyBtW,GAAzB,CAA6B,oBAA7B,EAAmDwV,iBAAnD,E","file":"/packages/rocketchat_slackbridge.js","sourcesContent":["/* globals logger:true */\n/* exported logger */\n\nlogger = new Logger('SlackBridge', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events',\n\t\tclass: 'Class'\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('SlackBridge', function() {\n\t\tthis.add('SlackBridge_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\tpublic: true\n\t\t});\n\n\t\tthis.add('SlackBridge_APIToken', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'API_Token'\n\t\t});\n\n\t\tthis.add('SlackBridge_AliasFormat', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Alias_Format',\n\t\t\ti18nDescription: 'Alias_Format_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_ExcludeBotnames', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Exclude_Botnames',\n\t\t\ti18nDescription: 'Exclude_Botnames_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_All', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}]\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Channels', '', {\n\t\t\ttype: 'roomPick',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_All',\n\t\t\t\tvalue: false\n\t\t\t}]\n\t\t});\n\t});\n});\n","/* globals logger */\nimport _ from 'underscore';\nimport util from 'util';\nimport url from 'url';\nimport http from 'http';\nimport https from 'https';\n\nclass SlackBridge {\n\n\tconstructor() {\n\t\tthis.util = util;\n\t\tthis.slackClient = require('@slack/client');\n\t\tthis.apiToken = RocketChat.settings.get('SlackBridge_APIToken');\n\t\tthis.aliasFormat = RocketChat.settings.get('SlackBridge_AliasFormat');\n\t\tthis.excludeBotnames = RocketChat.settings.get('SlackBridge_Botnames');\n\t\tthis.rtm = {};\n\t\tthis.connected = false;\n\t\tthis.userTags = {};\n\t\tthis.slackChannelMap = {};\n\t\tthis.reactionsMap = new Map();\n\n\t\tRocketChat.settings.get('SlackBridge_APIToken', (key, value) => {\n\t\t\tif (value !== this.apiToken) {\n\t\t\t\tthis.apiToken = value;\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_AliasFormat', (key, value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_ExcludeBotnames', (key, value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_Enabled', (key, value) => {\n\t\t\tif (value && this.apiToken) {\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\t\t\tthis.connected = true;\n\t\t\tlogger.connection.info('Connecting via token: ', this.apiToken);\n\t\t\tconst RtmClient = this.slackClient.RtmClient;\n\t\t\tthis.rtm = new RtmClient(this.apiToken);\n\t\t\tthis.rtm.start();\n\t\t\tthis.registerForSlackEvents();\n\t\t\tRocketChat.settings.get('SlackBridge_Out_Enabled', (key, value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.registerForRocketEvents();\n\t\t\t\t} else {\n\t\t\t\t\tthis.unregisterForRocketEvents();\n\t\t\t\t}\n\t\t\t});\n\t\t\tMeteor.startup(() => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.populateSlackChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.class.error('Error attempting to connect to Slack', err);\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.connected === true) {\n\t\t\tthis.connected = false;\n\t\t\tthis.rtm.disconnect && this.rtm.disconnect();\n\t\t\tlogger.connection.info('Disconnected');\n\t\t\tthis.unregisterForRocketEvents();\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findRocketUser(userId) || this.addRocketUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n\n\tfindRocketChannel(slackChannelId) {\n\t\treturn RocketChat.models.Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\taddRocketChannel(slackChannelID, hasRetried = false) {\n\t\tlogger.class.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet slackResults = null;\n\t\tlet isGroup = false;\n\t\tif (slackChannelID.charAt(0) === 'C') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t} else if (slackChannelID.charAt(0) === 'G') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/groups.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t\tisGroup = true;\n\t\t}\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true) {\n\t\t\tconst rocketChannelData = isGroup ? slackResults.data.group : slackResults.data.channel;\n\t\t\tconst existingRocketRoom = RocketChat.models.Rooms.findOneByName(rocketChannelData.name);\n\n\t\t\t// If the room exists, make sure we have its id in importIds\n\t\t\tif (existingRocketRoom || rocketChannelData.is_general) {\n\t\t\t\trocketChannelData.rocketId = rocketChannelData.is_general ? 'GENERAL' : existingRocketRoom._id;\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t} else {\n\t\t\t\tconst rocketUsers = [];\n\t\t\t\tfor (const member of rocketChannelData.members) {\n\t\t\t\t\tif (member !== rocketChannelData.creator) {\n\t\t\t\t\t\tconst rocketUser = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst rocketUserCreator = rocketChannelData.creator ? this.findRocketUser(rocketChannelData.creator) || this.addRocketUser(rocketChannelData.creator) : null;\n\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\tlogger.class.error('Could not fetch room creator information', rocketChannelData.creator);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst rocketChannel = RocketChat.createRoom(isGroup ? 'p' : 'c', rocketChannelData.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\trocketChannelData.rocketId = rocketChannel.rid;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\tlogger.class.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\treturn this.findRocketChannel(slackChannelID) || this.addRocketChannel(slackChannelID, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomUpdate = {\n\t\t\t\t\tts: new Date(rocketChannelData.created * 1000)\n\t\t\t\t};\n\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\tif (!_.isEmpty(rocketChannelData.topic && rocketChannelData.topic.value)) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.topic.value;\n\t\t\t\t\tlastSetTopic = rocketChannelData.topic.last_set;\n\t\t\t\t}\n\t\t\t\tif (!_.isEmpty(rocketChannelData.purpose && rocketChannelData.purpose.value) && rocketChannelData.purpose.last_set > lastSetTopic) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.purpose.value;\n\t\t\t\t}\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t\tthis.slackChannelMap[rocketChannelData.rocketId] = { id: slackChannelID, family: slackChannelID.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t}\n\t\t\treturn RocketChat.models.Rooms.findOneById(rocketChannelData.rocketId);\n\t\t}\n\t\tlogger.class.debug('Channel not added');\n\t\treturn;\n\t}\n\n\tfindRocketUser(slackUserID) {\n\t\tconst rocketUser = RocketChat.models.Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUser.username }` };\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddRocketUser(slackUserID) {\n\t\tlogger.class.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tconst slackResults = HTTP.get('https://slack.com/api/users.info', { params: { token: this.apiToken, user: slackUserID } });\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true && slackResults.data.user) {\n\t\t\tconst rocketUserData = slackResults.data.user;\n\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\tconst email = rocketUserData.profile && rocketUserData.profile.email || '';\n\t\t\tlet existingRocketUser;\n\t\t\tif (!isBot) {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByEmailAddress(email) || RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t} else {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t}\n\n\t\t\tif (existingRocketUser) {\n\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t} else {\n\t\t\t\tconst newUser = {\n\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\tusername: rocketUserData.name\n\t\t\t\t};\n\n\t\t\t\tif (!isBot && email) {\n\t\t\t\t\tnewUser.email = email;\n\t\t\t\t}\n\n\t\t\t\tif (isBot) {\n\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t}\n\n\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\tconst userUpdate = {\n\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\troles: isBot ? [ 'bot' ] : [ 'user' ]\n\t\t\t\t};\n\n\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\tuserUpdate['name'] = rocketUserData.profile.real_name;\n\t\t\t\t}\n\n\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\tuserUpdate['active'] = false;\n\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t}\n\n\t\t\t\tRocketChat.models.Users.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\tlet url = null;\n\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tRocketChat.setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.class.debug('Error setting user avatar', error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst importIds = [ rocketUserData.id ];\n\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t}\n\t\t\tRocketChat.models.Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUserData.name }` };\n\t\t\t}\n\t\t\treturn RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\t\t}\n\t\tlogger.class.debug('User not added');\n\t\treturn;\n\t}\n\n\taddAliasToRocketMsg(rocketUserName, rocketMsgObj) {\n\t\tif (this.aliasFormat) {\n\t\t\tconst alias = this.util.format(this.aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = this.processSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToRocketMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts && !RocketChat.models.Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\tlogger.class.debug('Send message to Rocket.Chat');\n\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonSlackReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; //Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`unset${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonSlackReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; //Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`set${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonSlackMessage(slackMessage, isImporting) {\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processSlackMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processSlackMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t//Simple message\n\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tprocessSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tlet rocketMsgObj = null;\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\tif (slackMessage.username !== undefined && this.excludeBotnames && slackMessage.username.match(this.excludeBotnames)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tbot: true,\n\t\t\t\t\tattachments: slackMessage.attachments,\n\t\t\t\t\tusername: slackMessage.username || slackMessage.bot_id\n\t\t\t\t};\n\t\t\t\tthis.addAliasToRocketMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\t\t\tif (slackMessage.icons) {\n\t\t\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t\t\t}\n\t\t\t\treturn rocketMsgObj;\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.addAliasToRocketMsg(rocketUser.username, {\n\t\t\t\t\tmsg: `_${ this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text) }_`\n\t\t\t\t});\n\t\t\tcase 'channel_join':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'group_join':\n\t\t\t\tif (slackMessage.inviter) {\n\t\t\t\t\tconst inviter = slackMessage.inviter ? this.findRocketUser(slackMessage.inviter) || this.addRocketUser(slackMessage.inviter) : null;\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\t\t\tusername: inviter.username\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.archiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\t\t\tconst details = {\n\t\t\t\t\t\tmessage_id: `slack-${ slackMessage.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\tname: slackMessage.file.name,\n\t\t\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\t\t\trid: rocketChannel._id\n\t\t\t\t\t};\n\t\t\t\t\treturn this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_comment':\n\t\t\t\tlogger.class.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tlogger.class.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\t\t\trocketMsgObj = {\n\t\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t\t\t'author_name' : slackMessage.attachments[0].author_subname,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ slackMessage.attachments[0].channel_id }-${ slackMessage.attachments[0].ts.replace(/\\./g, '-') }`, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn rocketMsgObj;\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Pinned item with no attachment');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'unpinned_item':\n\t\t\t\tlogger.class.error('Unpinned item not implemented');\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t//details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst requestModule = /https/i.test(slackFileURL) ? https : http;\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { 'Authorization': `Bearer ${ this.apiToken }` };\n\t\trequestModule.get(parsedUrl, Meteor.bindEnvironment((stream) => {\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tfileStore.insert(details, stream, (err, file) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow new Error(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttitle_link: url\n\t\t\t\t\t};\n\n\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = {\n\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\tattachments: [attachment]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (details.message_id && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\tmsg['_id'] = details.message_id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn RocketChat.sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\tregisterForRocketEvents() {\n\t\tRocketChat.callbacks.add('afterSaveMessage', this.onRocketMessage.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tRocketChat.callbacks.add('afterDeleteMessage', this.onRocketMessageDelete.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.add('setReaction', this.onRocketSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.add('unsetReaction', this.onRocketUnSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForRocketEvents() {\n\t\tRocketChat.callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tRocketChat.callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tregisterForSlackEvents() {\n\t\tconst CLIENT_EVENTS = this.slackClient.CLIENT_EVENTS;\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, () => {\n\t\t\tlogger.connection.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.UNABLE_TO_RTM_START, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.DISCONNECT, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tconst RTM_EVENTS = this.slackClient.RTM_EVENTS;\n\n\t\t/**\n\t\t* Event fired when someone messages a channel the bot is in\n\t\t* {\n\t\t*\ttype: 'message',\n\t\t* \tchannel: [channel_id],\n\t\t* \tuser: [user_id],\n\t\t* \ttext: [message],\n\t\t* \tts: [ts.milli],\n\t\t* \tteam: [team_id],\n\t\t* \tsubtype: [message_subtype],\n\t\t* \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.MESSAGE, Meteor.bindEnvironment((slackMessage) => {\n\t\t\tlogger.events.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\tthis.onSlackMessage(slackMessage);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_ADDED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionAdded(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_REMOVED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionRemoved(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t* Event fired when someone creates a public channel\n\t\t* {\n\t\t*\ttype: 'channel_created',\n\t\t*\tchannel: {\n\t\t*\t\tid: [channel_id],\n\t\t*\t\tis_channel: true,\n\t\t*\t\tname: [channel_name],\n\t\t*\t\tcreated: [ts],\n\t\t*\t\tcreator: [user_id],\n\t\t*\t\tis_shared: false,\n\t\t*\t\tis_org_shared: false\n\t\t*\t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_CREATED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a public channel\n\t\t* {\n\t\t* \ttype: 'channel_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_general: false,\n\t\t* \t\tis_member: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a public channel\n\t\t* {\n\t\t* \ttype: 'channel_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when an archived channel is deleted by an admin\n\t\t* {\n\t\t* \ttype: 'channel_deleted',\n\t\t* \tchannel: [channel_id],\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_DELETED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the channel has its name changed\n\t\t* {\n\t\t* \ttype: 'channel_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a private channel\n\t\t* {\n\t\t* \ttype: 'group_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_mpim: false,\n\t\t* \t\tis_open: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a private channel\n\t\t* {\n\t\t* \ttype: 'group_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the private channel has its name changed\n\t\t* {\n\t\t* \ttype: 'group_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when a new user joins the team\n\t\t* {\n\t\t* \ttype: 'team_join',\n\t\t* \tuser:\n\t\t* \t{\n\t\t* \t\tid: [user_id],\n\t\t* \t\tteam_id: [team_id],\n\t\t* \t\tname: [user_name],\n\t\t* \t\tdeleted: false,\n\t\t* \t\tstatus: null,\n\t\t* \t\tcolor: [color_code],\n\t\t* \t\treal_name: '',\n\t\t* \t\ttz: [timezone],\n\t\t* \t\ttz_label: [timezone_label],\n\t\t* \t\ttz_offset: [timezone_offset],\n\t\t* \t\tprofile:\n\t\t* \t\t{\n\t\t* \t\t\tavatar_hash: '',\n\t\t* \t\t\treal_name: '',\n\t\t* \t\t\treal_name_normalized: '',\n\t\t* \t\t\temail: '',\n\t\t* \t\t\timage_24: '',\n\t\t* \t\t\timage_32: '',\n\t\t* \t\t\timage_48: '',\n\t\t* \t\t\timage_72: '',\n\t\t* \t\t\timage_192: '',\n\t\t* \t\t\timage_512: '',\n\t\t* \t\t\tfields: null\n\t\t* \t\t},\n\t\t* \t\tis_admin: false,\n\t\t* \t\tis_owner: false,\n\t\t* \t\tis_primary_owner: false,\n\t\t* \t\tis_restricted: false,\n\t\t* \t\tis_ultra_restricted: false,\n\t\t* \t\tis_bot: false,\n\t\t* \t\tpresence: [user_presence]\n\t\t* \t},\n\t\t* \tcache_ts: [ts]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.TEAM_JOIN, Meteor.bindEnvironment(() => {}));\n\t}\n\n\tfindSlackChannel(rocketChannelName) {\n\t\tlogger.class.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const channel of response.data.channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const group of response.data.groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportFromHistory(family, options) {\n\t\tlogger.class.debug('Importing messages history');\n\t\tconst response = HTTP.get(`https://slack.com/api/${ family }.history`, { params: _.extend({ token: this.apiToken }, options) });\n\t\tif (response && response.data && _.isArray(response.data.messages) && response.data.messages.length > 0) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of response.data.messages.reverse()) {\n\t\t\t\tlogger.class.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onSlackMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: response.data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopySlackChannelInfo(rid, channelMap) {\n\t\tlogger.class.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst response = HTTP.get(`https://slack.com/api/${ channelMap.family }.info`, { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data) {\n\t\t\tconst data = channelMap.family === 'channels' ? response.data.channel : response.data.group;\n\t\t\tif (data && _.isArray(data.members) && data.members.length > 0) {\n\t\t\t\tfor (const member of data.members) {\n\t\t\t\t\tconst user = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tlogger.class.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tRocketChat.addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (data && data.topic && data.topic.value) {\n\t\t\t\ttopic = data.topic.value;\n\t\t\t\ttopic_last_set = data.topic.last_set;\n\t\t\t\ttopic_creator = data.topic.creator;\n\t\t\t}\n\n\t\t\tif (data && data.purpose && data.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < data.purpose.last_set) {\n\t\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.findRocketUser(topic_creator) || this.addRocketUser(topic_creator);\n\t\t\t\tlogger.class.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tRocketChat.saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data && _.isArray(response.data.items) && response.data.items.length > 0) {\n\t\t\tfor (const pin of response.data.items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.findRocketUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t'author_name' : user.username,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(user.username),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ pin.channel }-${ pin.message.ts.replace(/\\./g, '-') }`, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tlogger.class.info('importMessages: ', rid);\n\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.slackChannelMap[rid]) {\n\t\t\t\tthis.copySlackChannelInfo(rid, this.slackChannelMap[rid]);\n\n\t\t\t\tlogger.class.debug('Importing messages from Slack to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tlet results = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: 1 });\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: results.ts });\n\t\t\t\t}\n\n\t\t\t\tlogger.class.debug('Pinning Slack channel messages to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tthis.copyPins(rid, this.slackChannelMap[rid]);\n\n\t\t\t\treturn callback();\n\t\t\t} else {\n\t\t\t\tconst slack_room = this.findSlackChannel(rocketchat_room.name);\n\t\t\t\tif (slack_room) {\n\t\t\t\t\tthis.slackChannelMap[rid] = { id: slack_room.id, family: slack_room.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.class.error('Could not find Rocket.Chat room with specified id', rid);\n\t\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t\t}\n\t}\n\n\tpopulateSlackChannelMap() {\n\t\tlogger.class.debug('Populating channel map');\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const slackChannel of response.data.channels) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackChannel.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackChannel.id, family: slackChannel.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const slackGroup of response.data.groups) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackGroup.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackGroup.id, family: slackGroup.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessageDelete(rocketMessageDeleted) {\n\t\tlogger.class.debug('onRocketMessageDelete', rocketMessageDeleted);\n\n\t\tthis.postDeleteMessageToSlack(rocketMessageDeleted);\n\t}\n\n\tonRocketSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`set${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionAddedToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketUnSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketUnSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`unset${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionRemoveToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessage(rocketMessage) {\n\t\tlogger.class.debug('onRocketMessage', rocketMessage);\n\n\t\tif (rocketMessage.editedAt) {\n\t\t\t//This is an Edit Event\n\t\t\tthis.processRocketMessageChanged(rocketMessage);\n\t\t\treturn rocketMessage;\n\t\t}\n\t\t// Ignore messages originating from Slack\n\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\treturn rocketMessage;\n\t\t}\n\n\t\t//Probably a new message from Rocket.Chat\n\t\tconst outSlackChannels = RocketChat.settings.get('SlackBridge_Out_All') ? _.keys(this.slackChannelMap) : _.pluck(RocketChat.settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t//logger.class.debug('Out SlackChannels: ', outSlackChannels);\n\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\tthis.postMessageToSlack(this.slackChannelMap[rocketMessage.rid], rocketMessage);\n\t\t}\n\t\treturn rocketMessage;\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAddedToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemoveToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessageToSlack(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: this.slackChannelMap[rocketMessage.rid].id,\n\t\t\t\tas_user: true\n\t\t\t};\n\n\t\t\tlogger.class.debug('Post Delete Message to Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.delete', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message deleted on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessageToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getAvatarUrlFromUsername(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1\n\t\t\t};\n\t\t\tlogger.class.debug('Post Message To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n\t\t\t\tRocketChat.models.Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tlogger.class.debug(`RocketMsgID=${ rocketMessage._id } SlackMsgID=${ postResult.data.message.ts } SlackBotID=${ postResult.data.message.bot_id }`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdateToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true\n\t\t\t};\n\t\t\tlogger.class.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessRocketMessageChanged(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t//We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//This was a change from Rocket.Chat\n\t\t\tconst slackChannel = this.slackChannelMap[rocketMessage.rid];\n\t\t\tthis.postMessageUpdateToSlack(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessSlackMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\tconst rocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t//Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = RocketChat.models.Messages\n\t\t\t\t\t.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t//Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = RocketChat.models.Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tRocketChat.deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tlogger.class.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessSlackMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = RocketChat.models.Messages.findOneById(this.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t//Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && (slackMessage.message.text !== currentMsg.msg)) {\n\t\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user ? this.findRocketUser(slackMessage.previous_message.user) || this.addRocketUser(slackMessage.previous_message.user) : null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t//@TODO _id\n\t\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true\t//We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tRocketChat.updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tlogger.class.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessSlackNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.findRocketUser(slackMessage.user) || this.addRocketUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults['imported'] = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.createAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetSlackTS(rocketMsg) {\n\t\t//slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t//This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index+1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t//This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\tgetRocketChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findRocketChannel(slackMessage.channel) || this.addRocketChannel(slackMessage.channel) : null;\n\t}\n\n\tgetRocketUser(slackUser) {\n\t\treturn slackUser ? this.findRocketUser(slackUser) || this.addRocketUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${ slackChannel }-${ ts.replace(/\\./g, '-') }`;\n\t}\n\n}\n\nRocketChat.SlackBridge = new SlackBridge;\n","/* globals msgStream */\nfunction SlackBridgeImport(command, params, item) {\n\tif (command !== 'slackbridge-import' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tconst room = RocketChat.models.Rooms.findOneById(item.rid);\n\tconst channel = room.name;\n\tconst user = Meteor.users.findOne(Meteor.userId());\n\n\tmsgStream.emit(item.rid, {\n\t\t_id: Random.id(),\n\t\trid: item.rid,\n\t\tu: { username: 'rocket.cat' },\n\t\tts: new Date(),\n\t\tmsg: TAPi18n.__('SlackBridge_start', {\n\t\t\tpostProcess: 'sprintf',\n\t\t\tsprintf: [user.username, channel]\n\t\t}, user.language)\n\t});\n\n\ttry {\n\t\tRocketChat.SlackBridge.importMessages(item.rid, error => {\n\t\t\tif (error) {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel, error.message]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_finish', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tmsgStream.emit(item.rid, {\n\t\t\t_id: Random.id(),\n\t\t\trid: item.rid,\n\t\t\tu: { username: 'rocket.cat' },\n\t\t\tts: new Date(),\n\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [channel, error.message]\n\t\t\t}, user.language)\n\t\t});\n\t\tthrow error;\n\t}\n\treturn SlackBridgeImport;\n}\n\nRocketChat.slashCommands.add('slackbridge-import', SlackBridgeImport);\n"]}